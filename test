loadstring([[
	function LPH_NO_VIRTUALIZE(f) return f end;

	function LPH_JIT(f) return f end;

	function LPH_JIT_MAX(f) return f end;
]])();

local InterfaceEnabled = false

local script_key = "Nigger"

if not script_key or #script_key < 16 then
    InterfaceEnabled = true
end

local Library = LPH_NO_VIRTUALIZE(function()
	local cloneref = cloneref or function(...) return ... end

	local service = setmetatable({}, {
		__index = function(self, key)
			return cloneref(game.GetService(game, key))
		end
	})
	
	local Players = service.Players
	local UserInputService = service.UserInputService
	local ReplicatedStorage = service.ReplicatedStorage
	local RunService = service.RunService
	local GuiService = service.GuiService
	local Debris = service.Debris
	local TweenService = service.TweenService
	
	local __Instances = {
		Joshy = Instance.new("ScreenGui"),
		MainContainerFrame = Instance.new("Frame"),
		FloatContainerFrame = Instance.new("Frame"),
		UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint"),
		MainFrame = Instance.new("Frame"),
		UICorner = Instance.new("UICorner"),
		UIGradient = Instance.new("UIGradient"),
		TopBar = Instance.new("Frame"),
		Logo = Instance.new("ImageLabel"),
		UICorner_2 = Instance.new("UICorner"),
		Minimize = Instance.new("ImageButton"),
		Maximize = Instance.new("ImageButton"),
		UIGradient_2 = Instance.new("UIGradient"),
		Icon = Instance.new("ImageLabel"),
		InputBox = Instance.new("ImageButton"),
		Close = Instance.new("ImageButton"),
		UIGradient_3 = Instance.new("UIGradient"),
		Icon_2 = Instance.new("ImageLabel"),
		InputBox_2 = Instance.new("ImageButton"),
		Title = Instance.new("TextLabel"),
		UITextSizeConstraint = Instance.new("UITextSizeConstraint"),
		UIStroke = Instance.new("UIStroke"),
		ImageLabel = Instance.new("ImageLabel"),
		UICorner_3 = Instance.new("UICorner"),
		UIGradient_4 = Instance.new("UIGradient"),
		ContainerFrame_2 = Instance.new("Frame"),
		TabListFrame = Instance.new("Frame"),
		UICorner_4 = Instance.new("UICorner"),
		ScrollingFrame = Instance.new("ScrollingFrame"),
		Tab_2 = Instance.new("ImageButton"),
		Icon_3 = Instance.new("ImageButton"),
		UICorner_5 = Instance.new("UICorner"),
		TextLabel = Instance.new("TextLabel"),
		InputBox_3 = Instance.new("ImageButton"),
		Tab_3 = Instance.new("ImageButton"),
		Icon_4 = Instance.new("ImageButton"),
		UICorner_6 = Instance.new("UICorner"),
		TextLabel_2 = Instance.new("TextLabel"),
		InputBox_4 = Instance.new("ImageButton"),
		UIListLayout = Instance.new("UIListLayout"),
		SectionListFrame = Instance.new("Frame"),
		UICorner_7 = Instance.new("UICorner"),
		ScrollingFrame_2 = Instance.new("ScrollingFrame"),
		UIListLayout_2 = Instance.new("UIListLayout"),
		Section_1 = Instance.new("Frame"),
		ScrollingFrame_3 = Instance.new("ScrollingFrame"),
		Button = Instance.new("ImageButton"),
		Icon_5 = Instance.new("ImageButton"),
		UICorner_8 = Instance.new("UICorner"),
		TextLabel_3 = Instance.new("TextLabel"),
		UIGradient_5 = Instance.new("UIGradient"),
		InputBox_5 = Instance.new("ImageButton"),
		ImageButton = Instance.new("ImageButton"),
		UICorner_9 = Instance.new("UICorner"),
		UIGradient_6 = Instance.new("UIGradient"),
		UIStroke_2 = Instance.new("UIStroke"),
		Icon_6 = Instance.new("ImageButton"),
		UIListLayout_3 = Instance.new("UIListLayout"),
		Toggle = Instance.new("ImageButton"),
		Icon_7 = Instance.new("ImageButton"),
		UICorner_10 = Instance.new("UICorner"),
		TextLabel_4 = Instance.new("TextLabel"),
		UIGradient_7 = Instance.new("UIGradient"),
		InputBox_6 = Instance.new("ImageButton"),
		OuterBar = Instance.new("Frame"),
		Bar_3 = Instance.new("Frame"),
		UICorner_11 = Instance.new("UICorner"),
		Pointer = Instance.new("ImageButton"),
		UICorner_12 = Instance.new("UICorner"),
		UIStroke_3 = Instance.new("UIStroke"),
		UICorner_13 = Instance.new("UICorner"),
		Slider = Instance.new("ImageButton"),
		Icon_8 = Instance.new("ImageButton"),
		UICorner_14 = Instance.new("UICorner"),
		TextLabel_5 = Instance.new("TextLabel"),
		UIGradient_8 = Instance.new("UIGradient"),
		InputBox_7 = Instance.new("ImageButton"),
		Bar_4 = Instance.new("Frame"),
		UICorner_15 = Instance.new("UICorner"),
		Pointer_2 = Instance.new("ImageButton"),
		UICorner_16 = Instance.new("UICorner"),
		TextLabel_6 = Instance.new("TextLabel"),
		Keybind = Instance.new("ImageButton"),
		Icon_9 = Instance.new("ImageButton"),
		UICorner_17 = Instance.new("UICorner"),
		TextLabel_7 = Instance.new("TextLabel"),
		UIGradient_9 = Instance.new("UIGradient"),
		InputBox_8 = Instance.new("ImageButton"),
		OuterBar_2 = Instance.new("Frame"),
		UIStroke_4 = Instance.new("UIStroke"),
		UICorner_18 = Instance.new("UICorner"),
		Pointer_3 = Instance.new("ImageButton"),
		TextLabel_8 = Instance.new("TextLabel"),
		Section_3 = Instance.new("ImageButton"),
		Icon_10 = Instance.new("ImageButton"),
		UICorner_19 = Instance.new("UICorner"),
		TextLabel_9 = Instance.new("TextLabel"),
		InputBox_9 = Instance.new("ImageButton"),
		UIGradient_10 = Instance.new("UIGradient"),
		Separator = Instance.new("Frame"),
		ScrollingFrame_4 = Instance.new("ScrollingFrame"),
		Button_3 = Instance.new("ImageButton"),
		Icon_11 = Instance.new("ImageButton"),
		UICorner_20 = Instance.new("UICorner"),
		TextLabel_10 = Instance.new("TextLabel"),
		UIGradient_11 = Instance.new("UIGradient"),
		InputBox_10 = Instance.new("ImageButton"),
		ImageButton_2 = Instance.new("ImageButton"),
		UICorner_21 = Instance.new("UICorner"),
		UIGradient_12 = Instance.new("UIGradient"),
		UIStroke_5 = Instance.new("UIStroke"),
		Icon_12 = Instance.new("ImageButton"),
		UIListLayout_4 = Instance.new("UIListLayout"),
		Toggle_2 = Instance.new("ImageButton"),
		Icon_13 = Instance.new("ImageButton"),
		UICorner_22 = Instance.new("UICorner"),
		TextLabel_11 = Instance.new("TextLabel"),
		UIGradient_13 = Instance.new("UIGradient"),
		InputBox_11 = Instance.new("ImageButton"),
		OuterBar_3 = Instance.new("Frame"),
		Bar_7 = Instance.new("Frame"),
		UICorner_23 = Instance.new("UICorner"),
		Pointer_4 = Instance.new("ImageButton"),
		UICorner_24 = Instance.new("UICorner"),
		UIStroke_6 = Instance.new("UIStroke"),
		UICorner_25 = Instance.new("UICorner"),
		Slider_2 = Instance.new("ImageButton"),
		Icon_14 = Instance.new("ImageButton"),
		UICorner_26 = Instance.new("UICorner"),
		TextLabel_12 = Instance.new("TextLabel"),
		UIGradient_14 = Instance.new("UIGradient"),
		InputBox_12 = Instance.new("ImageButton"),
		Bar_8 = Instance.new("Frame"),
		UICorner_27 = Instance.new("UICorner"),
		Pointer_5 = Instance.new("ImageButton"),
		UICorner_28 = Instance.new("UICorner"),
		TextLabel_13 = Instance.new("TextLabel"),
		Keybind_2 = Instance.new("ImageButton"),
		Icon_15 = Instance.new("ImageButton"),
		UICorner_29 = Instance.new("UICorner"),
		TextLabel_14 = Instance.new("TextLabel"),
		UIGradient_15 = Instance.new("UIGradient"),
		InputBox_13 = Instance.new("ImageButton"),
		OuterBar_4 = Instance.new("Frame"),
		UIStroke_7 = Instance.new("UIStroke"),
		UICorner_30 = Instance.new("UICorner"),
		Pointer_6 = Instance.new("ImageButton"),
		TextLabel_15 = Instance.new("TextLabel"),
		Section_5 = Instance.new("ImageButton"),
		Icon_16 = Instance.new("ImageButton"),
		UICorner_31 = Instance.new("UICorner"),
		TextLabel_16 = Instance.new("TextLabel"),
		UIGradient_16 = Instance.new("UIGradient"),
		InputBox_14 = Instance.new("ImageButton"),
		Separator_2 = Instance.new("Frame"),
		UIGradient_17 = Instance.new("UIGradient"),
		Damp = Instance.new("Frame"),
		UIGradient_18 = Instance.new("UIGradient"),
		UICorner_32 = Instance.new("UICorner"),
		Separator_3 = Instance.new("Frame"),
		UIStroke_8 = Instance.new("UIStroke"),
		TextBox = Instance.new("ImageButton"),
		TextBox_2 = Instance.new("TextBox"),
		NotificationContainerFrame = Instance.new("Frame"),
		Description = Instance.new("TextLabel"),
		DialogContainerFrame = Instance.new("Frame"),
		BodyContainerFrame = Instance.new("Frame"),
		Decline = Instance.new("ImageButton"),
		Accept = Instance.new("ImageButton"),
		Title_2 = Instance.new("TextLabel"),
		UITextSizeConstraint_2 = Instance.new("UITextSizeConstraint"),
		Frame_5 = Instance.new("Frame"),
		Frame_6 = Instance.new("Frame"),
		Changelogs = Instance.new("TextLabel"),
		Change_1 = Instance.new("Frame"),
		Change_2 = Instance.new("TextLabel"),
		Change_3 = Instance.new("TextLabel"),
		Dropdown = Instance.new("ImageButton"),
		Frame_2 = Instance.new("Frame"),
		UIPadding = Instance.new("UIPadding"),
	};
	
	local Utility = (function()
		local Conducting = 0
		local TouchingPoints = {}
		local HasDragged = false
		
		local Utility = {} do
			function Utility.Input(self, Input, Move)
				if Input and (Input.UserInputType == Enum.UserInputType.Touch or Input.UserInputType == Enum.UserInputType.MouseButton1) then
					return Input, false
				elseif Input and (Move and Input.UserInputType == Enum.UserInputType.MouseMovement) then
					return Input, true
				end
	
				return false
			end
			
			function Utility.Dragify(self, Receiver, Object, Outline, Singular, Live)
				local Start, ObjectPosition, Dragging, CurrentPosition
	
				UserInputService.InputBegan:Connect(function(Input)
					if Utility:Input(Input) then
						Conducting = Conducting + 1
						TouchingPoints[Conducting] = Input
					end
					if Utility:Input(Input) and not HasDragged and Outline and Outline.Visible == true then
						Outline.Visible = false; HasDragged = true
					end
				end)
	
				local DragInput
				Receiver.InputBegan:Connect(function(Input)
					if Utility:Input(Input) then
						Dragging = true
						DragInput = Input
						Start = Input.Position
						
						if Outline then
							Outline.Visible = true
						end
						
						ObjectPosition = Object.Position
					end
				end)
	
				UserInputService.InputChanged:Connect(function(Input)
					local Input, Mouse = Utility:Input(Input, true)
					
					if Input and Dragging then
						if Singular and not Mouse then
							Input = DragInput
						end
						
						CurrentPosition = UDim2.new(ObjectPosition.X.Scale, ObjectPosition.X.Offset + (Input.Position - Start).X, ObjectPosition.Y.Scale, ObjectPosition.Y.Offset + (Input.Position - Start).Y)
						
						if Outline then
							Outline.Position = CurrentPosition
						end
						
						if Live then
							Object.Position = CurrentPosition
						end
					end
				end)
	
				UserInputService.InputEnded:Connect(function(Input)
					if Utility:Input(Input) and Dragging then
						Dragging = false
						DragInput = nil
						
						if Outline then
							Outline.Visible = false
						end
						
						if CurrentPosition then
							Object.Position = CurrentPosition
						end
					end
				end)
	
				local Signal; Signal = UserInputService.InputEnded:Connect(function(Input)
					if Utility:Input(Input) then
						TouchingPoints[Conducting] = nil
						Conducting = Conducting - 1
					end
				end)
			end
		end
		
		return Utility
	end)()
	
	local Instances = (function()
		local Instances = {} do
			Instances.__index = Instances
			function Instances.new(inst, props)
				local self = setmetatable({}, Instances)
				self.Instance = Instance.new(inst)
				self:__set_props(props)
				return self
			end
			---
			function Instances.create(inst)
				local self = setmetatable({}, Instances)
				self.Instance = inst
				return self
			end
			---
			function Instances:__set_props(props)
				for i,v in next, props do
					self.Instance[i] = v
				end
			end
			---
			function Instances:drop(destroy)
				if destroy then
					self.Instance:Destroy()
				end
				self = nil
			end
		end
	
		return Instances
	end)()
	
	local Input = (function()
		local Input = {
			Data = {
				Clicked = nil;
				Moved = nil;
				ClickBeganProcessed = nil;
				ClickEndedProcessed = nil;
			};
			Hovers = {};
			Clicks = {};
			DepthClicks = {};
			DepthHovers = {};
			Slides = {};
			Begin = Enum.UserInputState.Begin;
			End = Enum.UserInputState.End;
			Focus = Enum.UserInputType.Focus;
			Touch = Enum.UserInputType.Touch;
			MouseMovement = Enum.UserInputType.MouseMovement;
			MouseButton1 = Enum.UserInputType.MouseButton1;
			MouseButton2 = Enum.UserInputType.MouseButton2;
			MouseButton3 = Enum.UserInputType.MouseButton3;
		} do
			UserInputService.InputBegan:Connect(function(input, processed)
				Input.Data.Clicked = (input.UserInputType == Input.Touch or input.UserInputType == Input.MouseButton1) and input
				Input.Data.Moved = (input.UserInputType == Input.MouseMovement or input.UserInputType == Input.Touch) and input
				Input.Data.ClickBeganProcessed = processed and Input.Data.Clicked
	
				if Input.Data.Clicked or Input.Data.Moved then
					if Input.Data.Clicked then
						for _, closure in pairs(Input.Slides) do
							task.spawn(closure, input, processed, true, true)
						end
					end
	
					for object, data in pairs(Input.Hovers) do
						if Input:Within(object.AbsoluteSize, object.AbsolutePosition, input.Position) then
							data.HoverCallback(input, processed)
						else
							data.UnhoverCallback(input, processed)
						end
					end
				end
			end)
			UserInputService.InputChanged:Connect(function(input, processed)
				Input.Data.Moved = (input.UserInputType == Input.MouseMovement or input.UserInputType == Input.Touch) and input
				Input.Data.ClickBeganProcessed = processed and Input.Data.Clicked
	
				if Input.Data.Clicked and Input.Data.Moved then
					for _, closure in pairs(Input.Slides) do
						task.spawn(closure, input, processed, true, false)
					end
				end
			end)
			UserInputService.InputEnded:Connect(function(input, processed)
				local Clicked = (input.UserInputType == Input.Touch or input.UserInputType == Input.MouseButton1) and input
	
				for _, closure in pairs(Input.Slides) do
					task.spawn(closure, input, processed, false, false)
				end
	
				Input.Data.Clicked = nil
				Input.Data.Moved = nil
				Input.Data.ClickEndedProcessed = Clicked and processed
			end)
			function Input:Within(size, object_position, position)
				return position.X >= object_position.X and position.X <= object_position.X + size.X and position.Y >= object_position.Y and position.Y <= object_position.Y + size.Y
			end
			function Input:Slide(closure)
				self.Slides[#self.Slides + 1] = closure
			end
			function Input:Hover(object, hover_callback, unhover_callback)
				if not self.Hovers[object] then
					local data = {}
	
					self.Hovers[object] = data
	
					data.HoverCallback = hover_callback
					data.UnhoverCallback = unhover_callback
	
					data.Signal = object.InputBegan:Connect(function(input, processed)
						if self.Hovers[object] and (input.UserInputType == self.Touch or input.UserInputType == self.MouseMovement or input.UserInputType == self.MouseButton1) then
							hover_callback(input, processed)
	
							local Signal; Signal = input.Changed:Connect(function()
								if self.Hovers[object] and not self:Within(object.AbsoluteSize, object.AbsolutePosition, input.Position) or (input.UserInputState == self.End) then
									Signal:Disconnect(); Signal = nil
	
									unhover_callback(input, processed)
								end
							end)
						end
					end)
	
					function data:Disconnect()
						data.Signal:Disconnect()
						Input.Hovers[object] = nil
					end
	
					return data
				else
				end
			end
			function Input:Click(object, callback)
				if not self.Clicks[object] then
					local data = {}
	
					self.Clicks[object] = data
	
					data.Callback = callback
	
					data.Signal = object.InputBegan:Connect(function(input, processed)
						if not self.Data.Clicked and (input.UserInputType == self.Touch or input.UserInputType == self.MouseButton1) then
							local Signal; Signal = input.Changed:Connect(function()
								if self:Within(object.AbsoluteSize, object.AbsolutePosition, input.Position) and (input.UserInputState == self.End) then
									Signal:Disconnect(); Signal = nil
	
									callback(input, processed)
								end
							end)
						end
					end)
	
					function data:Disconnect()
						data.Signal:Disconnect()
						Input.Clicks[object] = nil
					end
	
					return data
				else
				end
			end
			function Input:Unclick(object, callback)
				if not self.Clicks[object] then
					local data = {}
	
					self.Clicks[object] = data
	
					data.Callback = callback
	
					data.Signal = UserInputService.InputBegan:Connect(function(input, processed)
						if (input.UserInputType == self.Touch or input.UserInputType == self.MouseButton1) and not self:Within(object.AbsoluteSize, object.AbsolutePosition, input.Position) then
							callback(input, processed)
	
							local Signal; Signal = input.Changed:Connect(function()
								if (input.UserInputState == self.End) then
									Signal:Disconnect(); Signal = nil
								end
							end)
						end
					end)
	
					function data:Disconnect()
						data.Signal:Disconnect()
						Input.Clicks[object] = nil
					end
	
					return data
				else
				end
			end
			function Input:DepthHover(object, callback)
				if not self.DepthHovers[object] then
					local data = {}
	
					self.DepthHovers[object] = data
	
					data.Callback = callback
	
					local Visual = Instances.new("ScreenGui", {
						Name = "Visual";
						SafeAreaCompatibility = Enum.SafeAreaCompatibility.FullscreenExtension;
						ResetOnSpawn = false;
						ScreenInsets = Enum.ScreenInsets.None;
						Parent = Players.LocalPlayer.PlayerGui;
					}) do
	
					end
	
					data.Signal = UserInputService.InputChanged:Connect(function(input, processed)
						if (input.UserInputType == self.Touch or input.UserInputType == self.MouseMovement) then
							local Frame, Boundaries = object:GetBoundingBox()
							local Position = object:GetPivot().Position
	
							local Camera = workspace.CurrentCamera
	
							local function ViewPoint(point, color)
								do return point end
	
								local Frame = Instances.new("Frame", {
									Name = nil;
									Active = false;
									AnchorPoint = Vector2.new(0.5, 0.5);
									BackgroundColor3 = color or Color3.fromRGB(255, 255, 255);
									BackgroundTransparency = 0.75;
									BorderSizePixel = 0;
									Size = UDim2.new(0, 5, 0, 5);
									Position = UDim2.new(0, point.X, 0, point.Y + GuiService:GetGuiInset().Y);
									ClipsDescendants = true;
									Parent = Visual.Instance;
								}) do
	
								end
	
								Debris:AddItem(Frame.Instance, 2)
	
								return point
							end
	
							ViewPoint(input.Position)
	
							local function Within()
								local Outside = false
	
								local Below = false
	
								local Halve = Boundaries / 2
	
								local Corners = {
									[1] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y + Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(255, 0, 0)); -- Back top left
									[2] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y + Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(255, 0, 0)); -- Back top right
	
									[3] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y - Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(0, 0, 255)); --Back bottom left
									[4] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y - Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(255, 1, 187)); -- Front bottom left
	
									[5] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y + Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(0, 255, 0)); -- Front top left
									[6] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y + Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(0, 255, 0)); -- Front top right
	
									[7] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y - Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(0, 0, 255)); -- Back bottom right
									[8] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y - Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(255, 1, 187)); -- Front bottom right
								}
	
								if true
									and (
										true
											and (input.Position.X >= Corners[1].X or input.Position.X >= Corners[2].X or input.Position.X >= Corners[3].X or input.Position.X >= Corners[4].X)
											and (input.Position.X <= Corners[5].X or input.Position.X <= Corners[6].X or input.Position.X <= Corners[7].X or input.Position.X <= Corners[8].X)
									)
										and (
											true
											and (input.Position.Y >= Corners[1].Y or input.Position.Y >= Corners[2].Y or input.Position.Y >= Corners[3].Y or input.Position.Y >= Corners[4].Y)
											and (input.Position.Y <= Corners[5].Y or input.Position.Y <= Corners[6].Y or input.Position.Y <= Corners[7].Y or input.Position.Y <= Corners[8].Y)
										)
										or (
											true
											and (input.Position.X >= Corners[5].X or input.Position.X >= Corners[6].X or input.Position.X >= Corners[7].X or input.Position.X >= Corners[8].X)
											and (input.Position.X <= Corners[1].X or input.Position.X <= Corners[2].X or input.Position.X <= Corners[3].X or input.Position.X <= Corners[4].X)
										)
										and (
											true
											and (input.Position.Y >= Corners[5].Y or input.Position.Y >= Corners[6].Y or input.Position.Y >= Corners[7].Y or input.Position.Y >= Corners[8].Y)
											and (input.Position.Y <= Corners[1].Y or input.Position.Y <= Corners[2].Y or input.Position.Y <= Corners[3].Y or input.Position.Y <= Corners[4].Y)
										)
								then
									return true
								end
	
								return false
							end
	
							if Within() then
								data.Callback(data, processed, true)
							else
								data.Callback(data, processed, false)
							end
	
							local Signal; Signal = input.Changed:Connect(function()
								if (input.UserInputState == self.End) then
									Signal:Disconnect(); Signal = nil
								end
							end)
						end
					end)
	
					function data:Disconnect()
						data.Signal:Disconnect()
						Input.DepthHovers[object] = nil
					end
	
					return data
				else
				end
			end
			function Input:DepthClick(object, callback)
				if not self.DepthClicks[object] then
					local data = {}
	
					self.DepthClicks[object] = data
	
					data.Callback = callback
	
					local Visual = Instances.new("ScreenGui", {
						Name = "Visual";
						SafeAreaCompatibility = Enum.SafeAreaCompatibility.FullscreenExtension;
						ResetOnSpawn = false;
						ScreenInsets = Enum.ScreenInsets.None;
						Parent = Players.LocalPlayer.PlayerGui;
					}) do
	
					end
	
					data.Signal = UserInputService.InputBegan:Connect(function(input, processed)
						if (input.UserInputType == self.Touch or input.UserInputType == self.MouseButton1) then
							local Frame, Boundaries = object:GetBoundingBox()
							local Position = object:GetPivot().Position
	
							local Camera = workspace.CurrentCamera
	
							local function ViewPoint(point, color)
								do return point end
	
								local Frame = Instances.new("Frame", {
									Name = nil;
									Active = false;
									AnchorPoint = Vector2.new(0.5, 0.5);
									BackgroundColor3 = color or Color3.fromRGB(255, 255, 255);
									BackgroundTransparency = 0.75;
									BorderSizePixel = 0;
									Size = UDim2.new(0, 5, 0, 5);
									Position = UDim2.new(0, point.X, 0, point.Y + GuiService:GetGuiInset().Y);
									ClipsDescendants = true;
									Parent = Visual.Instance;
								}) do
	
								end
	
								Debris:AddItem(Frame.Instance, 2)
	
								return point
							end
	
							ViewPoint(input.Position)
	
							local function Within()
								local Outside = false
	
								local Below = false
	
								local Halve = Boundaries / 2
	
								local Corners = {
									[1] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y + Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(255, 0, 0)); -- Back top left
									[2] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y + Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(255, 0, 0)); -- Back top right
	
									[3] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y - Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(0, 0, 255)); --Back bottom left
									[4] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y - Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(255, 1, 187)); -- Front bottom left
	
									[5] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y + Halve.Y, Position.Z - Halve.Z)), Color3.fromRGB(0, 255, 0)); -- Front top left
									[6] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y + Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(0, 255, 0)); -- Front top right
	
									[7] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X - Halve.X, Position.Y - Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(0, 0, 255)); -- Back bottom right
									[8] = ViewPoint(Camera:WorldToViewportPoint(Vector3.new(Position.X + Halve.X, Position.Y - Halve.Y, Position.Z + Halve.Z)), Color3.fromRGB(255, 1, 187)); -- Front bottom right
								}
	
								if true
									and (
										true
											and (input.Position.X >= Corners[1].X or input.Position.X >= Corners[2].X or input.Position.X >= Corners[3].X or input.Position.X >= Corners[4].X)
											and (input.Position.X <= Corners[5].X or input.Position.X <= Corners[6].X or input.Position.X <= Corners[7].X or input.Position.X <= Corners[8].X)
									)
										and (
											true
											and (input.Position.Y >= Corners[1].Y or input.Position.Y >= Corners[2].Y or input.Position.Y >= Corners[3].Y or input.Position.Y >= Corners[4].Y)
											and (input.Position.Y <= Corners[5].Y or input.Position.Y <= Corners[6].Y or input.Position.Y <= Corners[7].Y or input.Position.Y <= Corners[8].Y)
										)
										or (
											true
											and (input.Position.X >= Corners[5].X or input.Position.X >= Corners[6].X or input.Position.X >= Corners[7].X or input.Position.X >= Corners[8].X)
											and (input.Position.X <= Corners[1].X or input.Position.X <= Corners[2].X or input.Position.X <= Corners[3].X or input.Position.X <= Corners[4].X)
										)
										and (
											true
											and (input.Position.Y >= Corners[5].Y or input.Position.Y >= Corners[6].Y or input.Position.Y >= Corners[7].Y or input.Position.Y >= Corners[8].Y)
											and (input.Position.Y <= Corners[1].Y or input.Position.Y <= Corners[2].Y or input.Position.Y <= Corners[3].Y or input.Position.Y <= Corners[4].Y)
										)
								then
									return true
								end
	
								return false
							end
	
							if Within() then
								data.Callback(data, processed, true)
							else
								data.Callback(data, processed, false)
							end
	
							local Signal; Signal = input.Changed:Connect(function()
								if (input.UserInputState == self.End) then
									Signal:Disconnect(); Signal = nil
								end
							end)
						end
					end)
	
					function data:Disconnect()
						data.Signal:Disconnect()
						Input.DepthClicks[object] = nil
					end
	
					return data
				else
				end
			end
		end
	
		return Input
	end)()
	
	do
		local clone;
		clone = function(tbl)
			local Cloned = {}
	
			for i, v in pairs(tbl) do
				if type(v) == "table" then
					Cloned[i] = clone(v)
				elseif type(v) == "function" then
					Cloned[i] = v
				else
					Cloned[i] = v
				end
			end
	
			return Cloned
		end
	
		local Cache = {
	
		}
	
		local Debounce = {
	
		}
	
		local Library = {
			Cache = Cache;
			Debounce = Debounce;
			Data = {};
		}; do
			Library.__index = Library
		end
	
		Library.Assert = function(self, condition, message)
			if not condition then
				error(message)
			end
		end
	
		Library.Init = function(self, data)
			self:Assert(type(data) == "table", ("Data expected table for Init got %s."):format(type(data)))
	
			local Init = {
				Name = "Joshy";
				Parent = Players.LocalPlayer:WaitForChild("PlayerGui");
				Callback = function(self)
	
				end;
			}
	
			local self = setmetatable({
				Parent = self
			}, self)
			self.__index = self
			self.Data = data
			self.Init = clone(Init)
	
			for i, v in pairs(self.Init) do
				if data[i] == nil then
					self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
				end
	
				rawset(self.Init, i, data[i])
			end
	
			local Instances = setmetatable({}, {
				__index = function(self, key)
				end;
			})
	
			self.Instances = Instances
	
			self.Tweens = {}
	
			self.Notifications = {}
			self.Dialogs = {}
			self.Windows = {}
	
			self.NotificationsAmount = 0
	
			Instances.Joshy = Instance.new(__Instances.Joshy.ClassName)
			Instances.Joshy.Name = data.Name or "Joshy";
			Instances.Joshy.ZIndexBehavior = Enum.ZIndexBehavior.Global
			Instances.Joshy.ResetOnSpawn = false
			Instances.Joshy.DisplayOrder = 1001
			Instances.Joshy.Parent = data.Parent or Players.LocalPlayer:WaitForChild("PlayerGui");
	
			self.Destroy = function(self)
				Instances.Joshy:Destroy()
			end
	
			data.Callback(self)
	
			return self
		end; do
	
			local TableRemove = function(self, index, id)
				table.remove(self[index], id)
	
				for i = #self[index], self[index .. "ObjectId"], -1 do
					local v = self[index][i]
	
					if v then
						if v[index .. "ObjectId"] > self[index .. "ObjectId"] then
							v[index .. "ObjectId"] = v[index .. "ObjectId"] - 1
						end
					end
				end
			end
	
			Library.Notify = function(self, data)
				self:Assert(type(data) == "table", ("Data expected table for %s Notify got %s."):format(self.Init.Name, type(data)))
	
				local Init = {
					Name = "Name";
					Body = "Body";
					Duration = nil;
					Callback = function(self)
	
					end;
				}
	
				local self = setmetatable({
					Parent = self;
				}, self)
				self.__index = self
				self.Data = data
				self.Init = clone(Init)
	
				for i, v in pairs(self.Init) do
					if data[i] == nil then
						self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
					end
	
					rawset(self.Init, i, data[i])
				end
	
				local Instances = setmetatable({}, {
					__index = function(self, key)
					end;
				})
	
				self.Instances = Instances
	
				self.Tweens = {}
	
				table.insert(self.Notifications, self)
	
				self.NotificationsObjectId = #self.Notifications
	
				self.Parent.NotificationsAmount = self.Parent.NotificationsAmount + 1
	
				Instances.NotificationContainerFrame = Instance.new(__Instances.NotificationContainerFrame.ClassName)
				Instances.NotificationContainerFrame.Name = "NotificationContainerFrame";
				Instances.NotificationContainerFrame.AnchorPoint = Vector2.new(0.5, 1);
				Instances.NotificationContainerFrame.Size = UDim2.new(0, 200, 0, 100);
				Instances.NotificationContainerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.NotificationContainerFrame.BackgroundTransparency = 1;
				Instances.NotificationContainerFrame.Position = UDim2.new(0.875, 0, 0, 0);
				Instances.NotificationContainerFrame.BorderSizePixel = 0;
				Instances.NotificationContainerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.NotificationContainerFrame.ZIndex = 21
				Instances.NotificationContainerFrame.Parent = Instances.Joshy or self.Parent.Instances.Joshy;
	
				Instances.UIAspectRatioConstraint = Instance.new(__Instances.UIAspectRatioConstraint.ClassName)
				Instances.UIAspectRatioConstraint.Name = "UIAspectRatioConstraint";
				Instances.UIAspectRatioConstraint.AspectRatio = 1.5;
				Instances.UIAspectRatioConstraint.AspectType = Enum.AspectType.ScaleWithParentSize;
				Instances.UIAspectRatioConstraint.Parent = Instances.NotificationContainerFrame or self.Parent.Instances.NotificationContainerFrame;
	
				Instances.MainFrame = Instance.new(__Instances.MainFrame.ClassName)
				Instances.MainFrame.Name = "MainFrame";
				Instances.MainFrame.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.MainFrame.Size = UDim2.new(1, 0, 1, 0);
				Instances.MainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.MainFrame.ClipsDescendants = true;
				Instances.MainFrame.BackgroundTransparency = 0.5;
				Instances.MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.MainFrame.BorderSizePixel = 0;
				Instances.MainFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.MainFrame.ZIndex = 21
				Instances.MainFrame.Parent = Instances.NotificationContainerFrame or self.Parent.Instances.NotificationContainerFrame;
	
				Instances.UICorner = Instance.new(__Instances.UICorner.ClassName)
				Instances.UICorner.Name = "UICorner";
				Instances.UICorner.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UIGradient = Instance.new(__Instances.UIGradient.ClassName)
				Instances.UIGradient.Name = "UIGradient";
				Instances.UIGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 10)), ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 10))});
				Instances.UIGradient.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UIStroke = Instance.new(__Instances.UIStroke.ClassName)
				Instances.UIStroke.Name = "UIStroke";
				Instances.UIStroke.Transparency = 1;
				Instances.UIStroke.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.Title = Instance.new(__Instances.Title.ClassName)
				Instances.Title.Name = "Title";
				Instances.Title.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Title.Size = UDim2.new(0.8, 0, 0, 32);
				Instances.Title.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Title.BackgroundTransparency = 1;
				Instances.Title.Position = UDim2.new(0.5, 0, 0.150000006, 0);
				Instances.Title.BorderSizePixel = 0;
				Instances.Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Title.TextColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Title.Text = data.Name or "Error";
				Instances.Title.TextXAlignment = Enum.TextXAlignment.Left;
				Instances.Title.TextWrapped = true;
				Instances.Title.TextSize = 24;
				Instances.Title.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal);
				Instances.Title.ZIndex = 21
				Instances.Title.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.Description = Instance.new(__Instances.Description.ClassName)
				Instances.Description.Name = "Description";
				Instances.Description.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Description.Size = UDim2.new(0.75, 0, 0.5, 0);
				Instances.Description.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Description.BackgroundTransparency = 1;
				Instances.Description.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.Description.BorderSizePixel = 0;
				Instances.Description.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Description.TextYAlignment = Enum.TextYAlignment.Top;
				Instances.Description.TextColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Description.Text = data.Body or "We got an error from line 1492 which is unexpected";
				Instances.Description.TextXAlignment = Enum.TextXAlignment.Left;
				Instances.Description.TextWrapped = true;
				Instances.Description.TextSize = 14;
				Instances.Description.TextWrapped = true
				Instances.Description.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
				Instances.Description.ZIndex = 21
				Instances.Description.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				self.Tweens.Destroying = {}
	
				local NotificationYSize = Instances.NotificationContainerFrame.AbsoluteSize.Y * 2
	
				self.Destroy = function(self)
					do
						local TweenId = {}
						self.Tweens.Destroying[TweenId] = {
							Tween = TweenService:Create(Instances.MainFrame, TweenInfo.new(0.15, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {
								BackgroundTransparency = 1;
							});
						}
	
						self.Tweens.Destroying[TweenId].Tween:Play()
	
						self.Tweens.Destroying[TweenId].Completed = self.Tweens.Destroying[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Destroying[TweenId].Completed:Disconnect()
	
							self.Tweens.Destroying[TweenId] = nil
						end)
					end
	
					do
						local TweenId = {}
						self.Tweens.Destroying[TweenId] = {
							Tween = TweenService:Create(Instances.NotificationContainerFrame, TweenInfo.new(0.15, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {
								Size = UDim2.new(0.15, 0, 0.125, 0);
							});
						}
	
						self.Tweens.Destroying[TweenId].Tween:Play()
	
						self.Tweens.Destroying[TweenId].Completed = self.Tweens.Destroying[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Destroying[TweenId].Completed:Disconnect()
	
							self.Tweens.Destroying[TweenId] = nil
	
							Instances.NotificationContainerFrame:Destroy()
						end)
					end
	
					TableRemove(self, "Notifications", self.NotificationsObjectId)
	
					self.Parent.NotificationsAmount = self.Parent.NotificationsAmount - 1
				end
	
				self.Tweens.Queue = {}
	
				if data.Duration then
					task.delay(data.Duration, function()
						self:Destroy()
	
						for i, v in pairs(self.Tweens.Queue) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						local Ite = self.Parent.NotificationsAmount
	
						for i = #self.Notifications, 1, -1 do
							local v = self.Notifications[i]
	
							if v then
								Ite = Ite - 1
	
								do
									local TweenId = {}
									self.Tweens.Queue[TweenId] = {
										Tween = TweenService:Create(v.Instances.NotificationContainerFrame, TweenInfo.new(0.15, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {
											Position = UDim2.new(0.875, 0, 0.95, ((-(Instances.NotificationContainerFrame.AbsoluteSize.Y + 8)) * (i - 1)));
										});
									}
		
									self.Tweens.Queue[TweenId].Tween:Play()
	
									self.Tweens.Queue[TweenId].Completed = self.Tweens.Queue[TweenId].Tween.Completed:Connect(function()
										self.Tweens.Queue[TweenId].Completed:Disconnect()
	
										self.Tweens.Queue[TweenId] = nil
									end)
								end
							end
						end
					end)
				end
	
				for i, v in pairs(self.Tweens.Queue) do
					v.Tween:Pause()
	
					v.Completed:Disconnect()
				end
	
				for i = #self.Notifications, 1, -1 do
					local v = self.Notifications[i]
	
					if v then
						do
							local TweenId = {}
							self.Tweens.Queue[TweenId] = {
								Tween = TweenService:Create(v.Instances.NotificationContainerFrame, TweenInfo.new(0.15, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {
									Position = UDim2.new(0.875, 0, 0.95, ((-(Instances.NotificationContainerFrame.AbsoluteSize.Y + 8)) * (i - 1)));
								});
							}
		
							self.Tweens.Queue[TweenId].Tween:Play()
	
							self.Tweens.Queue[TweenId].Completed = self.Tweens.Queue[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Queue[TweenId].Completed:Disconnect()
	
								self.Tweens.Queue[TweenId] = nil
							end)
						end
					end
				end
	
				data.Callback(self)
	
				return self
			end
	
			Library.CreateDialog = function(self, data)
				self:Assert(type(data) == "table", ("Data expected table for %s CreateDialog got %s."):format(self.Init.Name, type(data)))
	
				local Init = {
					Name = "Name";
					Body = "Body";
					Duration = nil;
					Buttons = {
						Accept = nil;
						Decline = nil;
					};
					Callback = function(self)
	
					end;
				}
	
				local self = setmetatable({
					Parent = self;	
				}, self)
				self.__index = self
				self.Data = data
				self.Init = clone(Init)
	
				for i, v in pairs(self.Init) do
					if data[i] == nil then
						self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
					end
	
					rawset(self.Init, i, data[i])
				end
	
				local Instances = setmetatable({}, {
					__index = function(self, key)
					end;
				})
	
				self.Instances = Instances
	
				self.Tweens = {}
	
				table.insert(self.Dialogs, self)
	
				self.DialogsObjectId = #self.Dialogs
	
				Instances.DialogContainerFrame = Instance.new(__Instances.DialogContainerFrame.ClassName)
				Instances.DialogContainerFrame.Name = "DialogContainerFrame"
				Instances.DialogContainerFrame.Active = true
				Instances.DialogContainerFrame.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.DialogContainerFrame.Size = UDim2.new(0, 300, 0, 150)
				Instances.DialogContainerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.DialogContainerFrame.BackgroundTransparency = 1
				Instances.DialogContainerFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.DialogContainerFrame.BorderSizePixel = 0
				Instances.DialogContainerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.DialogContainerFrame.ZIndex = 11;
				Instances.DialogContainerFrame.Parent = Instances.Joshy or self.Parent.Instances.Joshy;
	
				Instances.UIAspectRatioConstraint = Instance.new(__Instances.UIAspectRatioConstraint.ClassName)
				Instances.UIAspectRatioConstraint.Name = "UIAspectRatioConstraint"
				Instances.UIAspectRatioConstraint.AspectRatio = 1.5
				Instances.UIAspectRatioConstraint.AspectType = Enum.AspectType.ScaleWithParentSize
				Instances.UIAspectRatioConstraint.Parent = Instances.DialogContainerFrame or self.Parent.Instances.DialogContainerFrame;
	
				Instances.MainFrame = Instance.new(__Instances.MainFrame.ClassName)
				Instances.MainFrame.Name = "MainFrame"
				Instances.MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.MainFrame.Size = UDim2.new(1, 0, 1, 0)
				Instances.MainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.MainFrame.ClipsDescendants = true
				Instances.MainFrame.BackgroundTransparency = 0.10000000149011612
				Instances.MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.MainFrame.BorderSizePixel = 0
				Instances.MainFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.MainFrame.ZIndex = 11;
				Instances.MainFrame.Parent = Instances.DialogContainerFrame or self.Parent.Instances.DialogContainerFrame;
	
				Instances.UICorner = Instance.new(__Instances.UICorner.ClassName)
				Instances.UICorner.Name = "UICorner"
				Instances.UICorner.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UIGradient = Instance.new(__Instances.UIGradient.ClassName)
				Instances.UIGradient.Name = "UIGradient"
				Instances.UIGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))})
				Instances.UIGradient.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.ImageLabel = Instance.new(__Instances.ImageLabel.ClassName)
				Instances.ImageLabel.Name = "ImageLabel"
				Instances.ImageLabel.AnchorPoint = Vector2.new(0.5, 0)
				Instances.ImageLabel.Size = UDim2.new(1, 0, 1, 0)
				Instances.ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.ImageLabel.BackgroundTransparency = 1
				Instances.ImageLabel.Position = UDim2.new(0.5, 0, 0, 0)
				Instances.ImageLabel.BorderSizePixel = 0
				Instances.ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.ImageLabel.ImageTransparency = 0.75
				Instances.ImageLabel.Image = "rbxassetid://18984475141"
				Instances.ImageLabel.ZIndex = 11;
				Instances.ImageLabel.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UICorner_2 = Instance.new(__Instances.UICorner_2.ClassName)
				Instances.UICorner_2.Name = "UICorner"
				Instances.UICorner_2.Parent = Instances.ImageLabel or self.Parent.Instances.ImageLabel;
	
				Instances.UIGradient_2 = Instance.new(__Instances.UIGradient_2.ClassName)
				Instances.UIGradient_2.Name = "UIGradient"
				Instances.UIGradient_2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 4, 255)), ColorSequenceKeypoint.new(0.4757785499095917, Color3.fromRGB(134, 0, 134)), ColorSequenceKeypoint.new(0.7041522860527039, Color3.fromRGB(2, 179, 150)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4))})
				Instances.UIGradient_2.Enabled = false
				Instances.UIGradient_2.Parent = Instances.ImageLabel or self.Parent.Instances.ImageLabel;
	
				Instances.TopBar = Instance.new(__Instances.TopBar.ClassName)
				Instances.TopBar.Name = "TopBar"
				Instances.TopBar.AnchorPoint = Vector2.new(0.5, 0)
				Instances.TopBar.ZIndex = 2
				Instances.TopBar.Size = UDim2.new(1, 0, 0, 36)
				Instances.TopBar.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.TopBar.BackgroundTransparency = 1
				Instances.TopBar.Position = UDim2.new(0.5, 0, 0, 0)
				Instances.TopBar.BorderSizePixel = 0
				Instances.TopBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.TopBar.ZIndex = 11;
				Instances.TopBar.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.Title = Instance.new(__Instances.Title.ClassName)
				Instances.Title.Name = "Title"
				Instances.Title.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Title.ZIndex = 3
				Instances.Title.Size = UDim2.new(0, 128, 0, 24)
				Instances.Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Title.BackgroundTransparency = 1
				Instances.Title.Position = UDim2.new(0.125, 45, 0.5, 0)
				Instances.Title.BorderSizePixel = 0
				Instances.Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Title.Text = data.Name or "Delete Sys32"
				Instances.Title.TextXAlignment = Enum.TextXAlignment.Left
				Instances.Title.TextSize = 24
				Instances.Title.FontFace = Font.new("rbxasset://fonts/families/TitilliumWeb.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
				Instances.Title.ZIndex = 11;
				Instances.Title.Parent = Instances.TopBar or self.Parent.Instances.TopBar;
	
				Instances.UITextSizeConstraint = Instance.new(__Instances.UITextSizeConstraint.ClassName)
				Instances.UITextSizeConstraint.Name = "UITextSizeConstraint"
				Instances.UITextSizeConstraint.MaxTextSize = 32
				Instances.UITextSizeConstraint.MinTextSize = 16
				Instances.UITextSizeConstraint.Parent = Instances.Title or self.Parent.Instances.Title;
	
				Instances.UIStroke = Instance.new(__Instances.UIStroke.ClassName)
				Instances.UIStroke.Name = "UIStroke"
				Instances.UIStroke.Transparency = 0.800000011920929
				Instances.UIStroke.Parent = Instances.Title or self.Parent.Instances.Title;
	
				Instances.InputBox = Instance.new(__Instances.InputBox.ClassName)
				Instances.InputBox.Name = "InputBox"
				Instances.InputBox.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.InputBox.Size = UDim2.new(1, 0, 1, 0)
				Instances.InputBox.SizeConstraint = Enum.SizeConstraint.RelativeYY
				Instances.InputBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.InputBox.BackgroundTransparency = 1
				Instances.InputBox.Position = UDim2.new(0.925000012, 0, 0.5, 0)
				Instances.InputBox.BorderSizePixel = 0
				Instances.InputBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.InputBox.ImageTransparency = 1
				Instances.InputBox.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
				Instances.InputBox.ZIndex = 13
				Instances.InputBox.Parent = Instances.TopBar or self.Parent.Instances.TopBar;
	
				Instances.Close = Instance.new(__Instances.Close.ClassName)
				Instances.Close.Name = "Close"
				Instances.Close.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Close.Size = UDim2.new(1, 0, 0.75, 0)
				Instances.Close.SizeConstraint = Enum.SizeConstraint.RelativeYY
				Instances.Close.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Close.ClipsDescendants = true
				Instances.Close.BackgroundTransparency = 1
				Instances.Close.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Close.BorderSizePixel = 0
				Instances.Close.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Close.ImageTransparency = 1
				Instances.Close.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
				Instances.Close.ZIndex = 11;
				Instances.Close.Parent = Instances.InputBox or self.Parent.Instances.InputBox;
	
				Instances.UIGradient_3 = Instance.new(__Instances.UIGradient_3.ClassName)
				Instances.UIGradient_3.Name = "UIGradient"
				Instances.UIGradient_3.Parent = Instances.Close or self.Parent.Instances.Close;
	
				Instances.Icon = Instance.new(__Instances.Icon.ClassName)
				Instances.Icon.Name = "Icon"
				Instances.Icon.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Icon.ZIndex = 3
				Instances.Icon.Size = UDim2.new(0, 20, 0, 20)
				Instances.Icon.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Icon.BackgroundTransparency = 1
				Instances.Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Icon.BorderSizePixel = 0
				Instances.Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Icon.Image = "rbxassetid://135328473849581"
				Instances.Icon.ZIndex = 11;
				Instances.Icon.Parent = Instances.Close or self.Parent.Instances.Close;
	
				Instances.Separator = Instance.new(__Instances.Separator.ClassName)
				Instances.Separator.Name = "Separator"
				Instances.Separator.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Separator.Size = UDim2.new(0.949999988, 0, 0, 1)
				Instances.Separator.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Separator.BackgroundTransparency = 0.75
				Instances.Separator.Position = UDim2.new(0.5, 0, 0, 36)
				Instances.Separator.BorderSizePixel = 0
				Instances.Separator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Separator.ZIndex = 11;
				Instances.Separator.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.ContainerFrame_2 = Instance.new(__Instances.ContainerFrame_2.ClassName)
				Instances.ContainerFrame_2.Name = "ContainerFrame"
				Instances.ContainerFrame_2.AnchorPoint = Vector2.new(0.5, 1)
				Instances.ContainerFrame_2.Size = UDim2.new(1, 0, 1, -36)
				Instances.ContainerFrame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.ContainerFrame_2.BackgroundTransparency = 1
				Instances.ContainerFrame_2.Position = UDim2.new(0.5, 0, 1, 0)
				Instances.ContainerFrame_2.BorderSizePixel = 0
				Instances.ContainerFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.ContainerFrame_2.ZIndex = 11;
				Instances.ContainerFrame_2.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.BodyContainerFrame = Instance.new(__Instances.BodyContainerFrame.ClassName)
				Instances.BodyContainerFrame.Name = "BodyContainerFrame"
				Instances.BodyContainerFrame.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.BodyContainerFrame.Size = UDim2.new(0.800000012, 0, 0.699999988, 0)
				Instances.BodyContainerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.BodyContainerFrame.BackgroundTransparency = 0.8500000238418579
				Instances.BodyContainerFrame.Position = UDim2.new(0.5, 0, 0.400000006, 0)
				Instances.BodyContainerFrame.BorderSizePixel = 0
				Instances.BodyContainerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.BodyContainerFrame.ZIndex = 11;
				Instances.BodyContainerFrame.Parent = Instances.ContainerFrame_2 or self.Parent.Instances.ContainerFrame_2;
	
				Instances.Title_2 = Instance.new(__Instances.Title_2.ClassName)
				Instances.Title_2.Name = "Title"
				Instances.Title_2.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Title_2.ZIndex = 3
				Instances.Title_2.Size = UDim2.new(0.899999976, 0, 0.899999976, 0)
				Instances.Title_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Title_2.BackgroundTransparency = 1
				Instances.Title_2.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Title_2.BorderSizePixel = 0
				Instances.Title_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Title_2.TextYAlignment = Enum.TextYAlignment.Top
				Instances.Title_2.TextColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Title_2.Text = data.Body or "Do you want to delete Sys32?"
				Instances.Title_2.TextXAlignment = Enum.TextXAlignment.Left
				Instances.Title_2.TextSize = 20
				Instances.Title_2.TextWrapped = true
				Instances.Title_2.FontFace = Font.new("rbxasset://fonts/families/TitilliumWeb.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
				Instances.Title_2.ZIndex = 11;
				Instances.Title_2.Parent = Instances.BodyContainerFrame or self.Parent.Instances.BodyContainerFrame;
	
				Instances.UITextSizeConstraint_2 = Instance.new(__Instances.UITextSizeConstraint_2.ClassName)
				Instances.UITextSizeConstraint_2.Name = "UITextSizeConstraint"
				Instances.UITextSizeConstraint_2.MaxTextSize = 32
				Instances.UITextSizeConstraint_2.MinTextSize = 16
				Instances.UITextSizeConstraint_2.Parent = Instances.Title_2 or self.Parent.Instances.Title_2;
	
				Instances.UIStroke_2 = Instance.new(__Instances.UIStroke_2.ClassName)
				Instances.UIStroke_2.Name = "UIStroke"
				Instances.UIStroke_2.Transparency = 0.800000011920929
				Instances.UIStroke_2.Parent = Instances.Title_2 or self.Parent.Instances.Title_2;
	
				Instances.UIGradient_4 = Instance.new(__Instances.UIGradient_4.ClassName)
				Instances.UIGradient_4.Name = "UIGradient"
				Instances.UIGradient_4.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.8999999761581421, 1), NumberSequenceKeypoint.new(1, 0.956250011920929)})
				Instances.UIGradient_4.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(125, 86, 86)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 86, 86))})
				Instances.UIGradient_4.Rotation = 90
				Instances.UIGradient_4.Parent = Instances.BodyContainerFrame or self.Parent.Instances.BodyContainerFrame;
	
				Instances.InputBox_2 = Instance.new(__Instances.InputBox_2.ClassName)
				Instances.InputBox_2.Name = "InputBox"
				Instances.InputBox_2.Active = true
				Instances.InputBox_2.Visible = false
				Instances.InputBox_2.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.InputBox_2.Size = UDim2.new(0, 72, 0, 36)
				Instances.InputBox_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.InputBox_2.BackgroundTransparency = 1
				Instances.InputBox_2.Position = UDim2.new(0.775, 0, 0.8, 0)
				Instances.InputBox_2.BorderSizePixel = 0
				Instances.InputBox_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.InputBox_2.ImageTransparency = 1
				Instances.InputBox_2.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
				Instances.InputBox_2.ZIndex = 13
				Instances.InputBox_2.Parent = Instances.ContainerFrame_2 or self.Parent.Instances.ContainerFrame_2;
	
				Instances.Accept = Instance.new(__Instances.Accept.ClassName)
				Instances.Accept.Name = "Accept"
				Instances.Accept.Active = false
				Instances.Accept.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Accept.Size = UDim2.new(1, 0, 0.75, 0)
				Instances.Accept.SizeConstraint = Enum.SizeConstraint.RelativeYY
				Instances.Accept.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Accept.ClipsDescendants = true
				Instances.Accept.BackgroundTransparency = 1
				Instances.Accept.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Accept.BorderSizePixel = 0
				Instances.Accept.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Accept.ImageTransparency = 1
				Instances.Accept.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
				Instances.Accept.ZIndex = 11;
				Instances.Accept.Parent = Instances.InputBox_2 or self.Parent.Instances.InputBox_2;
	
				Instances.Icon_2 = Instance.new(__Instances.Icon_2.ClassName)
				Instances.Icon_2.Name = "Icon"
				Instances.Icon_2.Active = false
				Instances.Icon_2.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Icon_2.Size = UDim2.new(0, 20, 0, 20)
				Instances.Icon_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Icon_2.BackgroundTransparency = 1
				Instances.Icon_2.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Icon_2.BorderSizePixel = 0
				Instances.Icon_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Icon_2.Image = "rbxassetid://18685934643"
				Instances.Icon_2.ZIndex = 11;
				Instances.Icon_2.Parent = Instances.Accept or self.Parent.Instances.Accept;
	
				Instances.UIGradient_5 = Instance.new(__Instances.UIGradient_5.ClassName)
				Instances.UIGradient_5.Name = "UIGradient"
				Instances.UIGradient_5.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.8999999761581421, 1), NumberSequenceKeypoint.new(1, 0.956250011920929)})
				Instances.UIGradient_5.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(125, 86, 86)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 86, 86))})
				Instances.UIGradient_5.Rotation = 90
				Instances.DialogContainerFrame.ZIndex = 11;
				Instances.UIGradient_5.Parent = Instances.Accept or self.Parent.Instances.Accept;
	
				Instances.Frame_5 = Instance.new(__Instances.Frame_5.ClassName)
				Instances.Frame_5.Name = "Frame"
				Instances.Frame_5.Active = false
				Instances.Frame_5.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Frame_5.Size = UDim2.new(1, 0, 1, 0)
				Instances.Frame_5.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Frame_5.BackgroundTransparency = 0.8500000238418579
				Instances.Frame_5.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Frame_5.BorderSizePixel = 0
				Instances.Frame_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Frame_5.ZIndex = 11;
				Instances.Frame_5.Parent = Instances.InputBox_2 or self.Parent.Instances.InputBox_2;
	
				Instances.UICorner_3 = Instance.new(__Instances.UICorner_3.ClassName)
				Instances.UICorner_3.Name = "UICorner"
				Instances.UICorner_3.CornerRadius = UDim.new(0, 4)
				Instances.UICorner_3.Parent = Instances.Frame_5 or self.Parent.Instances.Frame_5;
	
				Instances.InputBox_3 = Instance.new(__Instances.InputBox_3.ClassName)
				Instances.InputBox_3.Name = "InputBox"
				Instances.InputBox_3.Visible = false
				Instances.InputBox_3.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.InputBox_3.Size = UDim2.new(0, 72, 0, 36)
				Instances.InputBox_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.InputBox_3.BackgroundTransparency = 1
				Instances.InputBox_3.Position = UDim2.new(0.525, 0, 0.8, 0)
				Instances.InputBox_3.BorderSizePixel = 0
				Instances.InputBox_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.InputBox_3.ImageTransparency = 1
				Instances.InputBox_3.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
				Instances.InputBox_3.ZIndex = 13
				Instances.InputBox_3.Parent = Instances.ContainerFrame_2 or self.Parent.Instances.ContainerFrame_2;
	
				Instances.Decline = Instance.new(__Instances.Decline.ClassName)
				Instances.Decline.Name = "Decline"
				Instances.Decline.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Decline.Size = UDim2.new(1, 0, 0.75, 0)
				Instances.Decline.SizeConstraint = Enum.SizeConstraint.RelativeYY
				Instances.Decline.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Decline.ClipsDescendants = true
				Instances.Decline.BackgroundTransparency = 1
				Instances.Decline.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Decline.BorderSizePixel = 0
				Instances.Decline.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Decline.ImageTransparency = 1
				Instances.Decline.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
				Instances.Decline.ZIndex = 11;
				Instances.Decline.Parent = Instances.InputBox_3 or self.Parent.Instances.InputBox_3;
	
				Instances.UIGradient_6 = Instance.new(__Instances.UIGradient_6.ClassName)
				Instances.UIGradient_6.Name = "UIGradient"
				Instances.UIGradient_6.Parent = Instances.Decline or self.Parent.Instances.Decline;
	
				Instances.Icon_3 = Instance.new(__Instances.Icon_3.ClassName)
				Instances.Icon_3.Name = "Icon"
				Instances.Icon_3.Active = false
				Instances.Icon_3.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Icon_3.Size = UDim2.new(0, 20, 0, 20)
				Instances.Icon_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Icon_3.BackgroundTransparency = 1
				Instances.Icon_3.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Icon_3.BorderSizePixel = 0
				Instances.Icon_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Icon_3.Image = "rbxassetid://135328473849581"
				Instances.Icon_3.ZIndex = 11;
				Instances.Icon_3.Parent = Instances.Decline or self.Parent.Instances.Decline;
	
				Instances.Frame_6 = Instance.new(__Instances.Frame_6.ClassName)
				Instances.Frame_6.Name = "Frame"
				Instances.Frame_6.Active = false
				Instances.Frame_6.AnchorPoint = Vector2.new(0.5, 0.5)
				Instances.Frame_6.Size = UDim2.new(1, 0, 1, 0)
				Instances.Frame_6.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Instances.Frame_6.BackgroundTransparency = 1
				Instances.Frame_6.Position = UDim2.new(0.5, 0, 0.5, 0)
				Instances.Frame_6.BorderSizePixel = 0
				Instances.Frame_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Instances.Frame_6.ZIndex = 11;
				Instances.Frame_6.Parent = Instances.InputBox_3 or self.Parent.Instances.InputBox_3;
	
				Instances.UICorner_4 = Instance.new(__Instances.UICorner_4.ClassName)
				Instances.UICorner_4.Name = "UICorner"
				Instances.UICorner_4.CornerRadius = UDim.new(0, 4)
				Instances.UICorner_4.Parent = Instances.Frame_6 or self.Parent.Instances.Frame_6;
	
				Instances.UIGradient_7 = Instance.new(__Instances.UIGradient_7.ClassName)
				Instances.UIGradient_7.Name = "UIGradient"
				Instances.UIGradient_7.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.8999999761581421, 1), NumberSequenceKeypoint.new(1, 0.956250011920929)})
				Instances.UIGradient_7.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(125, 86, 86)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 86, 86))})
				Instances.UIGradient_7.Rotation = 90
				Instances.UIGradient_7.Parent = Instances.Frame_6 or self.Parent.Instances.Frame_6;
	
				self.Destroy = function(self)
					Instances.DialogContainerFrame:Destroy()
	
					TableRemove(self, "Dialogs", self.DialogsObjectId)
				end
	
				self.Close = function(self)
					self:Destroy()
				end
	
				for i, v in pairs(Instances.TopBar:GetDescendants()) do
					pcall(function()
						v.ZIndex = v.ZIndex + 1;
					end)
				end
	
				self.Tweens.Accept = {}
				self.Tweens.Decline = {}
	
				local CreateAcceptButton = function()
					Input:Hover(Instances.InputBox_2, function(input, processed)
	
						for i, v in pairs(self.Tweens.Accept) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						do
							local TweenId = {}
							self.Tweens.Accept[TweenId] = {
								Tween = TweenService:Create(Instances.Frame_5, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
									Size = UDim2.new(1.075, 0, 1.075, 0);
									BackgroundTransparency = 0.7;
								});
							}
	
							self.Tweens.Accept[TweenId].Tween:Play()
	
							self.Tweens.Accept[TweenId].Completed = self.Tweens.Accept[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Accept[TweenId].Completed:Disconnect()
	
								self.Tweens.Accept[TweenId] = nil
							end)
						end
					end, function(input, processed)
	
						for i, v in pairs(self.Tweens.Accept) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						do
							local TweenId = {}
							self.Tweens.Accept[TweenId] = {
								Tween = TweenService:Create(Instances.Frame_5, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
									Size = UDim2.new(1, 0, 1, 0);
									BackgroundTransparency = 0.85;
								});
							}
	
							self.Tweens.Accept[TweenId].Tween:Play()
	
							self.Tweens.Accept[TweenId].Completed = self.Tweens.Accept[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Accept[TweenId].Completed:Disconnect()
	
								self.Tweens.Accept[TweenId] = nil
							end)
						end
					end)
	
					Input:Click(Instances.InputBox_2, function(input, processed)
	
						data.Buttons.Accept.Callback(self, input, processed)
					end)
	
					Input:Click(Instances.Accept, function(input, processed)
	
						data.Buttons.Accept.Callback(self, input, processed)
					end)
				end
	
				local CreateDeclineButton = function()
					Input:Hover(Instances.InputBox_3, function(input, processed)
	
						for i, v in pairs(self.Tweens.Decline) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						do
							local TweenId = {}
							self.Tweens.Decline[TweenId] = {
								Tween = TweenService:Create(Instances.Frame_6, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
									Size = UDim2.new(1.075, 0, 1.075, 0);
									BackgroundTransparency = 0.7;
								});
							}
	
							self.Tweens.Decline[TweenId].Tween:Play()
	
							self.Tweens.Decline[TweenId].Completed = self.Tweens.Decline[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Decline[TweenId].Completed:Disconnect()
	
								self.Tweens.Decline[TweenId] = nil
							end)
						end
					end, function(input, processed)
	
						for i, v in pairs(self.Tweens.Decline) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						do
							local TweenId = {}
							self.Tweens.Decline[TweenId] = {
								Tween = TweenService:Create(Instances.Frame_6, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
									Size = UDim2.new(1, 0, 1, 0);
									BackgroundTransparency = 1;
								});
							}
	
							self.Tweens.Decline[TweenId].Tween:Play()
	
							self.Tweens.Decline[TweenId].Completed = self.Tweens.Decline[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Decline[TweenId].Completed:Disconnect()
	
								self.Tweens.Decline[TweenId] = nil
							end)
						end
					end)
	
					Input:Click(Instances.InputBox_3, function(input, processed)
	
						data.Buttons.Decline.Callback(self, input, processed)
					end)
	
					Input:Click(Instances.Decline, function(input, processed)
	
						data.Buttons.Decline.Callback(self, input, processed)
					end)
				end
	
				if data.Buttons.Accept then
					Instances.InputBox_2.Visible = true
					Instances.InputBox_2.Position = UDim2.new(0.775, 0, 0.8, 0)
	
					CreateAcceptButton()
	
					if data.Buttons.Decline then
						Instances.InputBox_3.Visible = true
						Instances.InputBox_3.Position = UDim2.new(0.525, 0, 0.8, 0)
	
						CreateDeclineButton()
					end
				else
					if data.Buttons.Decline then
						Instances.InputBox_3.Visible = true
						Instances.InputBox_3.Position = UDim2.new(0.775, 0, 0.8, 0)
	
						CreateDeclineButton()
					end
				end
	
				self.Tweens.Close = {}
	
				Input:Hover(Instances.InputBox, function(input, processed)
	
					for i, v in pairs(self.Tweens.Close) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Close[TweenId] = {
							Tween = TweenService:Create(Instances.Close, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1.1, 0, 0.9, 0);
								BackgroundTransparency = 0.7;
							});
						}
	
						self.Tweens.Close[TweenId].Tween:Play()
	
						self.Tweens.Close[TweenId].Completed = self.Tweens.Close[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Close[TweenId].Completed:Disconnect()
	
							self.Tweens.Close[TweenId] = nil
						end)
					end
				end, function(input, processed)
	
					for i, v in pairs(self.Tweens.Close) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Close[TweenId] = {
							Tween = TweenService:Create(Instances.Close, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1, 0, 1, 0);
								BackgroundTransparency = 1;
							});
						}
	
						self.Tweens.Close[TweenId].Tween:Play()
	
						self.Tweens.Close[TweenId].Completed = self.Tweens.Close[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Close[TweenId].Completed:Disconnect()
	
							self.Tweens.Close[TweenId] = nil
						end)
					end
				end)
	
				Input:Click(Instances.InputBox, function(input, processed)
	
					self:Close()
				end)
	
				Input:Click(Instances.Close, function(input, processed)
	
					self:Close()
				end)
	
				data.Callback(self)
	
				return self
			end
	
			Library.CreateWindow = function(self, data)
				self:Assert(type(data) == "table", ("Data expected table for %s CreateWindow got %s."):format(self.Init.Name, type(data)))
	
				local Init = {
					Name = "Window";
					Visible = nil;
					Silent = nil;
					Callback = function(self)
	
					end;
				}
	
				local self = setmetatable({
					Parent = self
				}, self)
				self.__index = self
				self.Data = data
				self.Init = clone(Init)
	
				for i, v in pairs(self.Init) do
					if data[i] == nil then
						self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
					end
	
					rawset(self.Init, i, data[i])
				end
	
				local Instances = setmetatable({}, {
					__index = function(self, key)
					end;
				})
	
				self.Instances = Instances
	
				self.Tweens = {}
	
				self.Tabs = {}
	
				table.insert(self.Windows, self)
	
				self.WindowsObjectId = #self.Windows
	
				Instances.MainContainerFrame = Instance.new(__Instances.MainContainerFrame.ClassName)
				Instances.MainContainerFrame.Name = "MainContainerFrame";
				Instances.MainContainerFrame.Active = true;
				Instances.MainContainerFrame.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.MainContainerFrame.Size = UDim2.new(0, 600, 0, 500);
				Instances.MainContainerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.MainContainerFrame.BackgroundTransparency = 1;
				Instances.MainContainerFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.MainContainerFrame.BorderSizePixel = 0;
				Instances.MainContainerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.MainContainerFrame.Parent = Instances.Joshy or self.Parent.Instances.Joshy;
	
				Instances.UIAspectRatioConstraint = Instance.new(__Instances.UIAspectRatioConstraint.ClassName)
				Instances.UIAspectRatioConstraint.Name = "UIAspectRatioConstraint";
				Instances.UIAspectRatioConstraint.AspectRatio = 1.5;
				Instances.UIAspectRatioConstraint.AspectType = Enum.AspectType.ScaleWithParentSize;
				Instances.UIAspectRatioConstraint.Parent = Instances.MainContainerFrame or self.Parent.Instances.MainContainerFrame;
	
				Instances.MainFrame = Instance.new(__Instances.MainFrame.ClassName)
				Instances.MainFrame.Name = "MainFrame";
				Instances.MainFrame.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.MainFrame.Size = UDim2.new(1, 0, 1, 0);
				Instances.MainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.MainFrame.ClipsDescendants = true;
				Instances.MainFrame.BackgroundTransparency = 0.10000000149011612;
				Instances.MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.MainFrame.BorderSizePixel = 0;
				Instances.MainFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.MainFrame.Parent = Instances.MainContainerFrame or self.Parent.Instances.MainContainerFrame;
	
				Instances.Separator_3 = Instance.new(__Instances.Separator_3.ClassName)
				Instances.Separator_3.Name = "Separator";
				Instances.Separator_3.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Separator_3.Size = UDim2.new(0.949999988, 0, 0, 1);
				Instances.Separator_3.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Separator_3.BackgroundTransparency = 0.75;
				Instances.Separator_3.Position = UDim2.new(0.5, 0, 0, 36);
				Instances.Separator_3.BorderSizePixel = 0;
				Instances.Separator_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Separator_3.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UIStroke_8 = Instance.new(__Instances.UIStroke_8.ClassName)
				Instances.UIStroke_8.Name = "UIStroke";
				Instances.UIStroke_8.Transparency = 0.800000011920929;
				Instances.UIStroke_8.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UICorner = Instance.new(__Instances.UICorner.ClassName)
				Instances.UICorner.Name = "UICorner";
				Instances.UICorner.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UIGradient = Instance.new(__Instances.UIGradient.ClassName)
				Instances.UIGradient.Name = "UIGradient";
				Instances.UIGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 10)), ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 10))});
				Instances.UIGradient.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.TopBar = Instance.new(__Instances.TopBar.ClassName)
				Instances.TopBar.Name = "TopBar";
				Instances.TopBar.AnchorPoint = Vector2.new(0.5, 0);
				Instances.TopBar.ZIndex = 3;
				Instances.TopBar.Size = UDim2.new(1, 0, 0, 36);
				Instances.TopBar.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.TopBar.BackgroundTransparency = 1;
				Instances.TopBar.Position = UDim2.new(0.5, 0, 0, 0);
				Instances.TopBar.BorderSizePixel = 0;
				Instances.TopBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.TopBar.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.Logo = Instance.new(__Instances.Logo.ClassName)
				Instances.Logo.Name = "Logo";
				Instances.Logo.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Logo.Size = UDim2.new(0, 30, 0, 30);
				Instances.Logo.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Logo.BackgroundTransparency = 1;
				Instances.Logo.Position = UDim2.new(0.0250000004, 8, 0.5, 0);
				Instances.Logo.BorderSizePixel = 0;
				Instances.Logo.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Logo.Image = "rbxassetid://127933662776938";
				Instances.Logo.Parent = Instances.TopBar or self.Parent.Instances.TopBar;
	
				Instances.UICorner_2 = Instance.new(__Instances.UICorner_2.ClassName)
				Instances.UICorner_2.Name = "UICorner";
				Instances.UICorner_2.Parent = Instances.Logo or self.Parent.Instances.Logo;
	
				Instances.InputBox = Instance.new(__Instances.InputBox.ClassName)
				Instances.InputBox.Name = "InputBox";
				Instances.InputBox.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.InputBox.ZIndex = 4;
				Instances.InputBox.Size = UDim2.new(1, 0, 0.75, 0);
				Instances.InputBox.SizeConstraint = Enum.SizeConstraint.RelativeYY;
				Instances.InputBox.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.InputBox.BackgroundTransparency = 1;
				Instances.InputBox.Position = UDim2.new(0.875, 0, 0.5, 0);
				Instances.InputBox.BorderSizePixel = 0;
				Instances.InputBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.InputBox.ImageTransparency = 1;
				Instances.InputBox.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
				Instances.InputBox.Parent = Instances.TopBar or self.Parent.Instances.TopBar;
	
				Instances.Minimize = Instance.new(__Instances.Minimize.ClassName)
				Instances.Minimize.Name = "Minimize";
				Instances.Minimize.Active = false;
				Instances.Minimize.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Minimize.ZIndex = 3;
				Instances.Minimize.Size = UDim2.new(1, 0, 1, 0);
				Instances.Minimize.SizeConstraint = Enum.SizeConstraint.RelativeXY;
				Instances.Minimize.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Minimize.ClipsDescendants = true;
				Instances.Minimize.BackgroundTransparency = 1;
				Instances.Minimize.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.Minimize.BorderSizePixel = 0;
				Instances.Minimize.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Minimize.ImageTransparency = 1;
				Instances.Minimize.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
				Instances.Minimize.Parent = Instances.InputBox or self.Parent.Instances.InputBox;
	
				Instances.UIGradient_2 = Instance.new(__Instances.UIGradient_2.ClassName)
				Instances.UIGradient_2.Name = "UIGradient";
				Instances.UIGradient_2.Parent = Instances.Minimize or self.Parent.Instances.Minimize;
	
				Instances.Icon = Instance.new(__Instances.Icon.ClassName)
				Instances.Icon.Name = "Icon";
				Instances.Icon.Active = false;
				Instances.Icon.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Icon.ZIndex = 3;
				Instances.Icon.Size = UDim2.new(0, 20, 0, 20);
				Instances.Icon.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Icon.BackgroundTransparency = 1;
				Instances.Icon.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.Icon.BorderSizePixel = 0;
				Instances.Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Icon.Image = "rbxassetid://18737578309";
				Instances.Icon.Parent = Instances.Minimize or self.Parent.Instances.Minimize;
	
				Instances.InputBox_2 = Instance.new(__Instances.InputBox_2.ClassName)
				Instances.InputBox_2.Name = "InputBox";
				Instances.InputBox_2.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.InputBox_2.ZIndex = 4;
				Instances.InputBox_2.Size = UDim2.new(1, 0, 0.75, 0);
				Instances.InputBox_2.SizeConstraint = Enum.SizeConstraint.RelativeYY;
				Instances.InputBox_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.InputBox_2.BackgroundTransparency = 1;
				Instances.InputBox_2.Position = UDim2.new(0.95, 0, 0.5, 0);
				Instances.InputBox_2.BorderSizePixel = 0;
				Instances.InputBox_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.InputBox_2.ImageTransparency = 1;
				Instances.InputBox_2.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
				Instances.InputBox_2.Parent = Instances.TopBar or self.Parent.Instances.TopBar;
	
				Instances.Close = Instance.new(__Instances.Close.ClassName)
				Instances.Close.Name = "Close";
				Instances.Close.Active = false;
				Instances.Close.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Close.ZIndex = 3;
				Instances.Close.Size = UDim2.new(1, 0, 1, 0);
				Instances.Close.SizeConstraint = Enum.SizeConstraint.RelativeXY;
				Instances.Close.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Close.ClipsDescendants = true;
				Instances.Close.BackgroundTransparency = 1;
				Instances.Close.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.Close.BorderSizePixel = 0;
				Instances.Close.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Close.ImageTransparency = 1;
				Instances.Close.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
				Instances.Close.Parent = Instances.InputBox_2 or self.Parent.Instances.InputBox_2;
	
				Instances.UIGradient_3 = Instance.new(__Instances.UIGradient_3.ClassName)
				Instances.UIGradient_3.Name = "UIGradient";
				Instances.UIGradient_3.Parent = Instances.Close or self.Parent.Instances.Close;
	
				Instances.Icon_2 = Instance.new(__Instances.Icon_2.ClassName)
				Instances.Icon_2.Name = "Icon";
				Instances.Icon_2.Active = false;
				Instances.Icon_2.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Icon_2.ZIndex = 3;
				Instances.Icon_2.Size = UDim2.new(0, 20, 0, 20);
				Instances.Icon_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Icon_2.BackgroundTransparency = 1;
				Instances.Icon_2.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.Icon_2.BorderSizePixel = 0;
				Instances.Icon_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Icon_2.Image = "rbxassetid://135328473849581";
				Instances.Icon_2.Parent = Instances.Close or self.Parent.Instances.Close;
	
				Instances.Title = Instance.new(__Instances.Title.ClassName)
				Instances.Title.Name = "Title";
				Instances.Title.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Title.ZIndex = 3;
				Instances.Title.Size = UDim2.new(0, 64, 0, 16);
				Instances.Title.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Title.BackgroundTransparency = 1;
				Instances.Title.Position = UDim2.new(0.0500000007, 40, 0.5, 0);
				Instances.Title.BorderSizePixel = 0;
				Instances.Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Title.TextYAlignment = Enum.TextYAlignment.Top;
				Instances.Title.TextColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Title.Text = data.Name or "Joshy";
				Instances.Title.TextXAlignment = Enum.TextXAlignment.Left;
				Instances.Title.TextSize = 16;
				Instances.Title.FontFace = Font.new("rbxasset://fonts/families/TitilliumWeb.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
				Instances.Title.Parent = Instances.TopBar or self.Parent.Instances.TopBar;
	
				Instances.UITextSizeConstraint = Instance.new(__Instances.UITextSizeConstraint.ClassName)
				Instances.UITextSizeConstraint.Name = "UITextSizeConstraint";
				Instances.UITextSizeConstraint.MaxTextSize = 32;
				Instances.UITextSizeConstraint.MinTextSize = 16;
				Instances.UITextSizeConstraint.Parent = Instances.Title or self.Parent.Instances.Title;
	
				Instances.UIStroke = Instance.new(__Instances.UIStroke.ClassName)
				Instances.UIStroke.Name = "UIStroke";
				Instances.UIStroke.Transparency = 0.800000011920929;
				Instances.UIStroke.Parent = Instances.Title or self.Parent.Instances.Title;
	
				Instances.ImageLabel = Instance.new(__Instances.ImageLabel.ClassName)
				Instances.ImageLabel.Name = "ImageLabel";
				Instances.ImageLabel.AnchorPoint = Vector2.new(0.5, 0);
				Instances.ImageLabel.Size = UDim2.new(1, 0, 1, 0);
				Instances.ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.ImageLabel.BackgroundTransparency = 1;
				Instances.ImageLabel.Position = UDim2.new(0.5, 0, 0, 0);
				Instances.ImageLabel.BorderSizePixel = 0;
				Instances.ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.ImageLabel.ImageTransparency = 0.75;
				Instances.ImageLabel.Image = "rbxassetid://18984475141";
				Instances.ImageLabel.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.UICorner_3 = Instance.new(__Instances.UICorner_3.ClassName)
				Instances.UICorner_3.Name = "UICorner";
				Instances.UICorner_3.Parent = Instances.ImageLabel or self.Parent.Instances.ImageLabel;
	
				Instances.UIGradient_4 = Instance.new(__Instances.UIGradient_4.ClassName)
				Instances.UIGradient_4.Name = "UIGradient";
				Instances.UIGradient_4.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 4, 255)), ColorSequenceKeypoint.new(0.4757785499095917, Color3.fromRGB(134, 0, 134)), ColorSequenceKeypoint.new(0.7041522860527039, Color3.fromRGB(2, 179, 150)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4))});
				Instances.UIGradient_4.Enabled = false;
				Instances.UIGradient_4.Parent = Instances.ImageLabel or self.Parent.Instances.ImageLabel;
	
				Instances.ContainerFrame_2 = Instance.new(__Instances.ContainerFrame_2.ClassName)
				Instances.ContainerFrame_2.Name = "ContainerFrame";
				Instances.ContainerFrame_2.AnchorPoint = Vector2.new(0.5, 1);
				Instances.ContainerFrame_2.Size = UDim2.new(1, 0, 1, -36);
				Instances.ContainerFrame_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.ContainerFrame_2.BackgroundTransparency = 1;
				Instances.ContainerFrame_2.Position = UDim2.new(0.5, 0, 1, 0);
				Instances.ContainerFrame_2.BorderSizePixel = 0;
				Instances.ContainerFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.ContainerFrame_2.Parent = Instances.MainFrame or self.Parent.Instances.MainFrame;
	
				Instances.TabListFrame = Instance.new(__Instances.TabListFrame.ClassName)
				Instances.TabListFrame.Name = "TabListFrame";
				Instances.TabListFrame.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.TabListFrame.ZIndex = 2;
				Instances.TabListFrame.Size = UDim2.new(0.25, -8, 1, -24);
				Instances.TabListFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.TabListFrame.BackgroundTransparency = 1;
				Instances.TabListFrame.Position = UDim2.new(0.125, 8, 0.5, 0);
				Instances.TabListFrame.BorderSizePixel = 0;
				Instances.TabListFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.TabListFrame.Parent = Instances.ContainerFrame_2 or self.Parent.Instances.ContainerFrame_2;
	
				Instances.UICorner_4 = Instance.new(__Instances.UICorner_4.ClassName)
				Instances.UICorner_4.Name = "UICorner";
				Instances.UICorner_4.Parent = Instances.TabListFrame or self.Parent.Instances.TabListFrame;
	
				Instances.ScrollingFrame = Instance.new(__Instances.ScrollingFrame.ClassName)
				Instances.ScrollingFrame.Name = "ScrollingFrame";
				Instances.ScrollingFrame.Active = true;
				Instances.ScrollingFrame.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.ScrollingFrame.Size = UDim2.new(1, -16, 1, -16);
				Instances.ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.ScrollingFrame.BackgroundTransparency = 1;
				Instances.ScrollingFrame.ScrollBarImageTransparency = 1;
				Instances.ScrollingFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.ScrollingFrame.BorderSizePixel = 0;
				Instances.ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.ScrollingFrame.ScrollBarThickness = 1;
				Instances.ScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
				Instances.ScrollingFrame.ElasticBehavior = Enum.ElasticBehavior.Never;
				Instances.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0);
				Instances.ScrollingFrame.Parent = Instances.TabListFrame or self.Parent.Instances.TabListFrame;
	
				Instances.UIListLayout = Instance.new(__Instances.UIListLayout.ClassName)
				Instances.UIListLayout.Name = "UIListLayout";
				Instances.UIListLayout.Padding = UDim.new(0, 4);
				Instances.UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
				Instances.UIListLayout.Parent = Instances.ScrollingFrame or self.Parent.Instances.ScrollingFrame;
	
				Instances.Damp = Instance.new(__Instances.Damp.ClassName)
				Instances.Damp.Name = "Damp";
				Instances.Damp.AnchorPoint = Vector2.new(0.5, 0.5);
				Instances.Damp.Size = UDim2.new(1, 0, 1, 0);
				Instances.Damp.BorderColor3 = Color3.fromRGB(0, 0, 0);
				Instances.Damp.BackgroundTransparency = 0.25;
				Instances.Damp.Position = UDim2.new(0.5, 0, 0.5, 0);
				Instances.Damp.BorderSizePixel = 0;
				Instances.Damp.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
				Instances.Damp.ZIndex = 1;
				Instances.Damp.Parent = Instances.ContainerFrame_2 or self.Parent.Instances.ContainerFrame_2;
	
				Instances.UIGradient_18 = Instance.new(__Instances.UIGradient_18.ClassName)
				Instances.UIGradient_18.Name = "UIGradient";
				Instances.UIGradient_18.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 1)});
				Instances.UIGradient_18.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 10)), ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 10))});
				Instances.UIGradient_18.Rotation = -90;
				Instances.UIGradient_18.Parent = Instances.Damp or self.Parent.Instances.Damp;
	
				Instances.UICorner_32 = Instance.new(__Instances.UICorner_32.ClassName)
				Instances.UICorner_32.Name = "UICorner";
				Instances.UICorner_32.Parent = Instances.Damp or self.Parent.Instances.Damp;
				
				do
					Instances.FloatContainerFrame = Instance.new(__Instances.FloatContainerFrame.ClassName)
					Instances.FloatContainerFrame.Name = "FloatContainerFrame";
					Instances.FloatContainerFrame.Active = true;
					Instances.FloatContainerFrame.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.FloatContainerFrame.Size = UDim2.new(0, 100, 0, 500);
					Instances.FloatContainerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.FloatContainerFrame.BackgroundTransparency = 1;
					Instances.FloatContainerFrame.Position = UDim2.new(0.125, 0, 0.75, 0);
					Instances.FloatContainerFrame.BorderSizePixel = 0;
					Instances.FloatContainerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.FloatContainerFrame.Parent = Instances.Joshy or self.Parent.Instances.Joshy;
	
					Instances.UIAspectRatioConstraint_2 = Instance.new(__Instances.UIAspectRatioConstraint.ClassName)
					Instances.UIAspectRatioConstraint_2.Name = "UIAspectRatioConstraint";
					Instances.UIAspectRatioConstraint_2.AspectRatio = 1.5;
					Instances.UIAspectRatioConstraint_2.AspectType = Enum.AspectType.ScaleWithParentSize;
					Instances.UIAspectRatioConstraint_2.Parent = Instances.FloatContainerFrame or self.Parent.Instances.FloatContainerFrame;
	
					Instances.MainFrame_2 = Instance.new(__Instances.MainFrame.ClassName)
					Instances.MainFrame_2.Name = "MainFrame";
					Instances.MainFrame_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.MainFrame_2.Size = UDim2.new(1, 0, 1, 0);
					Instances.MainFrame_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.MainFrame_2.ClipsDescendants = true;
					Instances.MainFrame_2.BackgroundTransparency = 0.10000000149011612;
					Instances.MainFrame_2.Position = UDim2.new(0.5, 0, 0.5, 0);
					Instances.MainFrame_2.BorderSizePixel = 0;
					Instances.MainFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.MainFrame_2.Parent = Instances.FloatContainerFrame or self.Parent.Instances.FloatContainerFrame;
	
					Instances.Separator_3_2 = Instance.new(__Instances.Separator_3.ClassName)
					Instances.Separator_3_2.Name = "Separator";
					Instances.Separator_3_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Separator_3_2.Size = UDim2.new(0.949999988, 0, 0, 1);
					Instances.Separator_3_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Separator_3_2.BackgroundTransparency = 0.75;
					Instances.Separator_3_2.Position = UDim2.new(0.5, 0, 0, 36);
					Instances.Separator_3_2.BorderSizePixel = 0;
					Instances.Separator_3_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Separator_3_2.Parent = Instances.MainFrame_2 or self.Parent.Instances.MainFrame_2;
	
					Instances.UIStroke_8_2 = Instance.new(__Instances.UIStroke_8.ClassName)
					Instances.UIStroke_8_2.Name = "UIStroke";
					Instances.UIStroke_8_2.Transparency = 0.800000011920929;
					Instances.UIStroke_8_2.Parent = Instances.MainFrame_2 or self.Parent.Instances.MainFrame_2;
	
					Instances.UICorner_2 = Instance.new(__Instances.UICorner.ClassName)
					Instances.UICorner_2.Name = "UICorner";
					Instances.UICorner_2.Parent = Instances.MainFrame_2 or self.Parent.Instances.MainFrame_2;
	
					Instances.UIGradient_2 = Instance.new(__Instances.UIGradient.ClassName)
					Instances.UIGradient_2.Name = "UIGradient";
					Instances.UIGradient_2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(10, 10, 10)), ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 10))});
					Instances.UIGradient_2.Parent = Instances.MainFrame_2 or self.Parent.Instances.MainFrame_2;
	
					Instances.TopBar_2 = Instance.new(__Instances.TopBar.ClassName)
					Instances.TopBar_2.Name = "TopBar";
					Instances.TopBar_2.AnchorPoint = Vector2.new(0.5, 0);
					Instances.TopBar_2.ZIndex = 3;
					Instances.TopBar_2.Size = UDim2.new(1, 0, 0, 36);
					Instances.TopBar_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.TopBar_2.BackgroundTransparency = 1;
					Instances.TopBar_2.Position = UDim2.new(0.5, 0, 0, 0);
					Instances.TopBar_2.BorderSizePixel = 0;
					Instances.TopBar_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.TopBar_2.Parent = Instances.MainFrame_2 or self.Parent.Instances.MainFrame_2;
	
					Instances.Logo_2 = Instance.new(__Instances.Logo.ClassName)
					Instances.Logo_2.Name = "Logo";
					Instances.Logo_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Logo_2.Size = UDim2.new(0, 30, 0, 30);
					Instances.Logo_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Logo_2.BackgroundTransparency = 1;
					Instances.Logo_2.Position = UDim2.new(0.025, 16, 0.5, 0);
					Instances.Logo_2.BorderSizePixel = 0;
					Instances.Logo_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Logo_2.Image = "rbxassetid://18984490161";
					Instances.Logo_2.Parent = Instances.TopBar_2 or self.Parent.Instances.TopBar_2;
	
					Instances.UICorner_2_2 = Instance.new(__Instances.UICorner_2.ClassName)
					Instances.UICorner_2_2.Name = "UICorner";
					Instances.UICorner_2_2.Parent = Instances.Logo_2 or self.Parent.Instances.Logo_2;
	
					Instances.InputBox_1_2 = Instance.new(__Instances.InputBox.ClassName)
					Instances.InputBox_1_2.Name = "InputBox";
					Instances.InputBox_1_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.InputBox_1_2.ZIndex = 4;
					Instances.InputBox_1_2.Size = UDim2.new(1, 0, 0.75, 0);
					Instances.InputBox_1_2.SizeConstraint = Enum.SizeConstraint.RelativeYY;
					Instances.InputBox_1_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.InputBox_1_2.BackgroundTransparency = 1;
					Instances.InputBox_1_2.Position = UDim2.new(0.875, -10, 0.5, 0);
					Instances.InputBox_1_2.BorderSizePixel = 0;
					Instances.InputBox_1_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.InputBox_1_2.ImageTransparency = 1;
					Instances.InputBox_1_2.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
					Instances.InputBox_1_2.ZIndex = 2;
					Instances.InputBox_1_2.Parent = Instances.TopBar_2 or self.Parent.Instances.TopBar_2;
	
					Instances.Maximize = Instance.new(__Instances.Maximize.ClassName)
					Instances.Maximize.Name = "Maximize";
					Instances.Maximize.Active = false;
					Instances.Maximize.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Maximize.ZIndex = 3;
					Instances.Maximize.Size = UDim2.new(1, 0, 1, 0);
					Instances.Maximize.SizeConstraint = Enum.SizeConstraint.RelativeXY;
					Instances.Maximize.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Maximize.ClipsDescendants = true;
					Instances.Maximize.BackgroundTransparency = 1;
					Instances.Maximize.Position = UDim2.new(0.5, 0, 0.5, 0);
					Instances.Maximize.BorderSizePixel = 0;
					Instances.Maximize.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Maximize.ImageTransparency = 1;
					Instances.Maximize.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
					Instances.Maximize.Parent = Instances.InputBox_1_2 or self.Parent.Instances.InputBox_1_2;
	
					Instances.UIGradient_2_2 = Instance.new(__Instances.UIGradient_2.ClassName)
					Instances.UIGradient_2_2.Name = "UIGradient";
					Instances.UIGradient_2_2.Parent = Instances.Maximize or self.Parent.Instances.Maximize;
					
					Instances.Icon_1_2 = Instance.new(__Instances.Icon.ClassName)
					Instances.Icon_1_2.Name = "Icon";
					Instances.Icon_1_2.Active = false;
					Instances.Icon_1_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Icon_1_2.ZIndex = 3;
					Instances.Icon_1_2.Size = UDim2.new(0, 20, 0, 20);
					Instances.Icon_1_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Icon_1_2.BackgroundTransparency = 1;
					Instances.Icon_1_2.Position = UDim2.new(0.5, 0, 0.5, 0);
					Instances.Icon_1_2.BorderSizePixel = 0;
					Instances.Icon_1_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Icon_1_2.Image = "rbxassetid://127906495990930";
					Instances.Icon_1_2.Parent = Instances.Maximize or self.Parent.Instances.Maximize;
	
					Instances.InputBox_2_2 = Instance.new(__Instances.InputBox_2.ClassName)
					Instances.InputBox_2_2.Name = "InputBox";
					Instances.InputBox_2_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.InputBox_2_2.ZIndex = 4;
					Instances.InputBox_2_2.Size = UDim2.new(1, 0, 0.75, 0);
					Instances.InputBox_2_2.SizeConstraint = Enum.SizeConstraint.RelativeYY;
					Instances.InputBox_2_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.InputBox_2_2.BackgroundTransparency = 1;
					Instances.InputBox_2_2.Position = UDim2.new(0.95, 0, 0.5, 0);
					Instances.InputBox_2_2.BorderSizePixel = 0;
					Instances.InputBox_2_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.InputBox_2_2.ImageTransparency = 1;
					Instances.InputBox_2_2.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
					Instances.InputBox_2_2.Visible = false;
					Instances.InputBox_2_2.ZIndex = 2;
					Instances.InputBox_2_2.Parent = Instances.TopBar_2 or self.Parent.Instances.TopBar_2;
	
					Instances.Close_2 = Instance.new(__Instances.Close.ClassName)
					Instances.Close_2.Name = "Close";
					Instances.Close_2.Active = false;
					Instances.Close_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Close_2.ZIndex = 3;
					Instances.Close_2.Size = UDim2.new(1, 0, 1, 0);
					Instances.Close_2.SizeConstraint = Enum.SizeConstraint.RelativeXY;
					Instances.Close_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Close_2.ClipsDescendants = true;
					Instances.Close_2.BackgroundTransparency = 1;
					Instances.Close_2.Position = UDim2.new(0.5, 0, 0.5, 0);
					Instances.Close_2.BorderSizePixel = 0;
					Instances.Close_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Close_2.ImageTransparency = 1;
					Instances.Close_2.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
					Instances.Close_2.Parent = Instances.InputBox_2_2 or self.Parent.Instances.InputBox_2_2;
	
					Instances.UIGradient_3_2 = Instance.new(__Instances.UIGradient_3.ClassName)
					Instances.UIGradient_3_2.Name = "UIGradient";
					Instances.UIGradient_3_2.Parent = Instances.Close_2 or self.Parent.Instances.Close_2;
	
					Instances.Icon_2_2 = Instance.new(__Instances.Icon_2.ClassName)
					Instances.Icon_2_2.Name = "Icon";
					Instances.Icon_2_2.Active = false;
					Instances.Icon_2_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Icon_2_2.ZIndex = 3;
					Instances.Icon_2_2.Size = UDim2.new(0, 20, 0, 20);
					Instances.Icon_2_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Icon_2_2.BackgroundTransparency = 1;
					Instances.Icon_2_2.Position = UDim2.new(0.5, 0, 0.5, 0);
					Instances.Icon_2_2.BorderSizePixel = 0;
					Instances.Icon_2_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Icon_2_2.Image = "rbxassetid://135328473849581";
					Instances.Icon_2_2.Parent = Instances.Close_2 or self.Parent.Instances.Close_2;
	
					Instances.Title_2 = Instance.new(__Instances.Title.ClassName)
					Instances.Title_2.Name = "Title";
					Instances.Title_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Title_2.ZIndex = 3;
					Instances.Title_2.Size = UDim2.new(0, 64, 0, 16);
					Instances.Title_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Title_2.BackgroundTransparency = 1;
					Instances.Title_2.Position = UDim2.new(0.05, 36, 0.5, 32);
					Instances.Title_2.BorderSizePixel = 0;
					Instances.Title_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Title_2.TextYAlignment = Enum.TextYAlignment.Top;
					Instances.Title_2.TextColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Title_2.Text = data.Name or "Joshy";
					Instances.Title_2.TextXAlignment = Enum.TextXAlignment.Left;
					Instances.Title_2.TextSize = 16;
					Instances.Title_2.FontFace = Font.new("rbxasset://fonts/families/TitilliumWeb.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Instances.Title_2.Parent = Instances.TopBar_2 or self.Parent.Instances.TopBar_2;
	
					Instances.UITextSizeConstraint_2 = Instance.new(__Instances.UITextSizeConstraint.ClassName)
					Instances.UITextSizeConstraint_2.Name = "UITextSizeConstraint";
					Instances.UITextSizeConstraint_2.MaxTextSize = 32;
					Instances.UITextSizeConstraint_2.MinTextSize = 16;
					Instances.UITextSizeConstraint_2.Parent = Instances.Title_2 or self.Parent.Instances.Title_2;
	
					Instances.UIStroke_2 = Instance.new(__Instances.UIStroke.ClassName)
					Instances.UIStroke_2.Name = "UIStroke";
					Instances.UIStroke_2.Transparency = 0.800000011920929;
					Instances.UIStroke_2.Parent = Instances.Title_2 or self.Parent.Instances.Title_2;
	
					Instances.ImageLabel_2 = Instance.new(__Instances.ImageLabel.ClassName)
					Instances.ImageLabel_2.Name = "ImageLabel";
					Instances.ImageLabel_2.AnchorPoint = Vector2.new(0.5, 0);
					Instances.ImageLabel_2.Size = UDim2.new(1, 0, 1, 0);
					Instances.ImageLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.ImageLabel_2.BackgroundTransparency = 1;
					Instances.ImageLabel_2.Position = UDim2.new(0.5, 0, 0, 0);
					Instances.ImageLabel_2.BorderSizePixel = 0;
					Instances.ImageLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.ImageLabel_2.ImageTransparency = 0.75;
					Instances.ImageLabel_2.Image = "rbxassetid://18984475141";
					Instances.ImageLabel_2.Parent = Instances.MainFrame_2 or self.Parent.Instances.MainFrame_2;
	
					Instances.UICorner_3_2 = Instance.new(__Instances.UICorner_3.ClassName)
					Instances.UICorner_3_2.Name = "UICorner";
					Instances.UICorner_3_2.Parent = Instances.ImageLabel_2 or self.Parent.Instances.ImageLabel_2;
	
					Instances.UIGradient_4_2 = Instance.new(__Instances.UIGradient_4.ClassName)
					Instances.UIGradient_4_2.Name = "UIGradient";
					Instances.UIGradient_4_2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 4, 255)), ColorSequenceKeypoint.new(0.4757785499095917, Color3.fromRGB(134, 0, 134)), ColorSequenceKeypoint.new(0.7041522860527039, Color3.fromRGB(2, 179, 150)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4))});
					Instances.UIGradient_4_2.Enabled = false;
					Instances.UIGradient_4_2.Parent = Instances.ImageLabel_2 or self.Parent.Instances.ImageLabel_2;
					
					for i, v in pairs(Instances.TopBar_2:GetDescendants()) do
						pcall(function()
							v.ZIndex = v.ZIndex + 1;
						end)
					end
				end
	
				self.Destroy = function(self)
					Instances.MainContainerFrame:Destroy()
					Instances.FloatContainerFrame:Destroy()
	
					TableRemove(self, "Windows", self.WindowsObjectId)
				end
	
				self.Tweens.Visibility = {}
	
				self.Open = function(self)
					data.Visible = true
	
					for i, v in pairs(self.Tweens.Visibility) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
					
					Instances.FloatContainerFrame.Visible = false
					Instances.MainContainerFrame.Visible = true
	
					do
						local TweenId = {}
						self.Tweens.Visibility[TweenId] = {
							Tween = TweenService:Create(Instances.MainContainerFrame, TweenInfo.new(0.4, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {
								Size = UDim2.new(0, 600, 0, 500);
							});
						}
	
						self.Tweens.Visibility[TweenId].Tween:Play()
	
						self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
							self.Tweens.Visibility[TweenId] = nil
						end)
					end
				end
	
				self.Minimize = function(self)
					data.Visible = false
	
					for i, v in pairs(self.Tweens.Visibility) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Visibility[TweenId] = {
							Tween = TweenService:Create(Instances.MainContainerFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
								Size = UDim2.new(0, 0, 0, 0);
							});
						}
	
						self.Tweens.Visibility[TweenId].Tween:Play()
	
						self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
							self.Tweens.Visibility[TweenId] = nil
							
							if not data.Silent then
								Instances.FloatContainerFrame.Visible = true
							else
								Instances.FloatContainerFrame.Visible = false
							end
							
							Instances.MainContainerFrame.Visible = false
						end)
					end
				end
	
				self.Close = function(self)
					self:Destroy()
				end
	
				for i, v in pairs(Instances.TopBar:GetDescendants()) do
					pcall(function()
						v.ZIndex = v.ZIndex + 1;
					end)
				end
				
				Utility:Dragify(Instances.TopBar, Instances.MainContainerFrame, nil, true, true)
				
				Utility:Dragify(Instances.TopBar_2, Instances.FloatContainerFrame, nil, true, true)
	
				if not data.Visible
				or data.Silent then
					if not data.Silent then
						Instances.FloatContainerFrame.Visible = true
					else
						Instances.FloatContainerFrame.Visible = false
					end
	
					Instances.MainContainerFrame.Visible = false
	
					self:Minimize()
				else
					Instances.FloatContainerFrame.Visible = false
					Instances.MainContainerFrame.Visible = true
	
					self:Open()
				end
	
				local KeyCodeCharacter = {
					One = 1;
					Two = 2;
					Three = 3;
					Four = 4;
					Five = 5;
					Six = 6;
					Seven = 7;
					Eight = 8;
					Nine = 9;
					Zero = 0;
				}
	
				local Pressed = false
	
				UserInputService.InputBegan:Connect(function(input, processed)
					if input.UserInputType == Enum.UserInputType.Keyboard then
						if not processed then
							if not Pressed then
								if input.KeyCode == data.Keybind then
									Pressed = input.KeyCode
								end
							end
						end
					end
				end)
	
				UserInputService.InputEnded:Connect(function(input, processed)
					if input.UserInputType == Enum.UserInputType.Keyboard then
						if not processed then
							if Pressed then
								if input.KeyCode == Pressed then
									Pressed = false
		
									if not data.Visible then
										self:Open()
									else
										self:Minimize()
									end
								end
							end
						end
					end
				end)
				
				self.Tweens.Maximize = {}
	
				Input:Hover(Instances.Icon_1_2, function(input, processed)
	
					for i, v in pairs(self.Tweens.Maximize) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Maximize[TweenId] = {
							Tween = TweenService:Create(Instances.Maximize, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1.1, 0, 1.1, 0);
								BackgroundTransparency = 0.7;
							});
						}
	
						self.Tweens.Maximize[TweenId].Tween:Play()
	
						self.Tweens.Maximize[TweenId].Completed = self.Tweens.Maximize[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Maximize[TweenId].Completed:Disconnect()
	
							self.Tweens.Maximize[TweenId] = nil
						end)
					end
				end, function(input, processed)
	
					for i, v in pairs(self.Tweens.Maximize) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Maximize[TweenId] = {
							Tween = TweenService:Create(Instances.Maximize, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1, 0, 1, 0);
								BackgroundTransparency = 1;
							});
						}
	
						self.Tweens.Maximize[TweenId].Tween:Play()
	
						self.Tweens.Maximize[TweenId].Completed = self.Tweens.Maximize[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Maximize[TweenId].Completed:Disconnect()
	
							self.Tweens.Maximize[TweenId] = nil
						end)
					end
				end)
	
				Input:Click(Instances.Icon_1_2, function(input, processed)
	
					self:Open()
				end)
				
				self.Tweens.Minimize = {}
	
				Input:Hover(Instances.InputBox, function(input, processed)
	
					for i, v in pairs(self.Tweens.Minimize) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Minimize[TweenId] = {
							Tween = TweenService:Create(Instances.Minimize, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1.1, 0, 1.1, 0);
								BackgroundTransparency = 0.7;
							});
						}
	
						self.Tweens.Minimize[TweenId].Tween:Play()
	
						self.Tweens.Minimize[TweenId].Completed = self.Tweens.Minimize[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Minimize[TweenId].Completed:Disconnect()
	
							self.Tweens.Minimize[TweenId] = nil
						end)
					end
				end, function(input, processed)
	
					for i, v in pairs(self.Tweens.Minimize) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Minimize[TweenId] = {
							Tween = TweenService:Create(Instances.Minimize, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1, 0, 1, 0);
								BackgroundTransparency = 1;
							});
						}
	
						self.Tweens.Minimize[TweenId].Tween:Play()
	
						self.Tweens.Minimize[TweenId].Completed = self.Tweens.Minimize[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Minimize[TweenId].Completed:Disconnect()
	
							self.Tweens.Minimize[TweenId] = nil
						end)
					end
				end)
	
				Input:Click(Instances.InputBox, function(input, processed)
	
					self:Minimize()
				end)
	
				self.Tweens.Close = {}
	
				Input:Hover(Instances.InputBox_2, function(input, processed)
	
					for i, v in pairs(self.Tweens.Close) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Close[TweenId] = {
							Tween = TweenService:Create(Instances.Close, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1.1, 0, 1.1, 0);
								BackgroundTransparency = 0.7;
							});
						}
	
						self.Tweens.Close[TweenId].Tween:Play()
	
						self.Tweens.Close[TweenId].Completed = self.Tweens.Close[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Close[TweenId].Completed:Disconnect()
	
							self.Tweens.Close[TweenId] = nil
						end)
					end
				end, function(input, processed)
	
					for i, v in pairs(self.Tweens.Close) do
						v.Tween:Pause()
	
						v.Completed:Disconnect()
					end
	
					do
						local TweenId = {}
						self.Tweens.Close[TweenId] = {
							Tween = TweenService:Create(Instances.Close, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
								Size = UDim2.new(1, 0, 1, 0);
								BackgroundTransparency = 1;
							});
						}
	
						self.Tweens.Close[TweenId].Tween:Play()
	
						self.Tweens.Close[TweenId].Completed = self.Tweens.Close[TweenId].Tween.Completed:Connect(function()
							self.Tweens.Close[TweenId].Completed:Disconnect()
	
							self.Tweens.Close[TweenId] = nil
						end)
					end
				end)
	
				Input:Click(Instances.InputBox_2, function(input, processed)
	
					local Window = self
	
					self.Parent:CreateDialog({
						Name = ("Close %s"):format(self.Init.Name);
						Body = ("Are you sure you want to close %s? You cannot open this again."):format(self.Init.Name);
						Duration = 60;
						Buttons = {
							Accept = {
								Callback = function(self)
									self:Destroy()
	
									Window:Close()
								end;
							};
							Decline = {
								Callback = function(self)
									self:Destroy()
								end;	
							};
						};
						Callback = function(self)
	
						end;
					})
				end)
	
				Instances.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
					Instances.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, Instances.UIListLayout.AbsoluteContentSize.Y)
				end)
	
				self.CreateTab = function(self, data)
					self:Assert(type(data) == "table", ("Data expected table for %s CreateTab got %s."):format(self.Init.Name, type(data)))
	
					local Init = {
						Name = "Tab";
						Home = nil;
						Callback = function(self)
	
						end;
					}
	
					local self = setmetatable({
						Parent = self
					}, self)
					self.__index = self
					self.Data = data
					self.Init = clone(Init)
	
					for i, v in pairs(self.Init) do
						if data[i] == nil then
							self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
						end
	
						rawset(self.Init, i, data[i])
					end
	
					local Instances = setmetatable({}, {
						__index = function(self, key)
						end;
					})
	
					self.Instances = Instances
	
					self.Tweens = {}
	
					self.Sections = {}
	
					table.insert(self.Tabs, self)
	
					self.TabsObjectId = #self.Tabs
	
					Instances.Tab_2 = Instance.new(__Instances.Tab_2.ClassName)
					Instances.Tab_2.Name = data.Name or "Tab";
					Instances.Tab_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Tab_2.Size = UDim2.new(1, 0, 0, 36);
					Instances.Tab_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Tab_2.BackgroundTransparency = 0.85;
					Instances.Tab_2.Position = UDim2.new(0.5, 0, 0, 18);
					Instances.Tab_2.BorderSizePixel = 0;
					Instances.Tab_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Tab_2.ImageTransparency = 1;
					Instances.Tab_2.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
					Instances.Tab_2.LayoutOrder = data.LayoutOrder or 0;
					Instances.Tab_2.ZIndex = 2;
					Instances.Tab_2.Parent = Instances.ScrollingFrame or self.Parent.Instances.ScrollingFrame;
	
					Instances.Icon_3 = Instance.new(__Instances.Icon_3.ClassName)
					Instances.Icon_3.Name = "Icon";
					Instances.Icon_3.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.Icon_3.Size = UDim2.new(0, 20, 0, 20);
					Instances.Icon_3.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.Icon_3.BackgroundTransparency = 1;
					Instances.Icon_3.Position = UDim2.new(0.100000001, 8, 0.5, 0);
					Instances.Icon_3.BorderSizePixel = 0;
					Instances.Icon_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.Icon_3.Image = data.Icon or "rbxassetid://18984738599";
					Instances.Icon_3.ZIndex = 2;
					Instances.Icon_3.Parent = Instances.Tab_2 or self.Parent.Instances.Tab_2;
	
					Instances.UICorner_5 = Instance.new(__Instances.UICorner_5.ClassName)
					Instances.UICorner_5.Name = "UICorner";
					Instances.UICorner_5.CornerRadius = UDim.new(0, 4);
					Instances.UICorner_5.Parent = Instances.Tab_2 or self.Parent.Instances.Tab_2;
	
					Instances.TextLabel = Instance.new(__Instances.TextLabel.ClassName)
					Instances.TextLabel.Name = "TextLabel";
					Instances.TextLabel.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.TextLabel.Size = UDim2.new(1, -40, 1, 0);
					Instances.TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.TextLabel.BackgroundTransparency = 1;
					Instances.TextLabel.Position = UDim2.new(0.5, 20, 0.5, 0);
					Instances.TextLabel.BorderSizePixel = 0;
					Instances.TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255);
					Instances.TextLabel.Text = data.Name or "Tab";
					Instances.TextLabel.TextXAlignment = Enum.TextXAlignment.Left;
					Instances.TextLabel.TextWrapped = true;
					Instances.TextLabel.TextSize = 14;
					Instances.TextLabel.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Instances.TextLabel.ZIndex = 2;
					Instances.TextLabel.Parent = Instances.Tab_2 or self.Parent.Instances.Tab_2;
	
					Instances.InputBox_3 = Instance.new(__Instances.InputBox_3.ClassName)
					Instances.InputBox_3.Name = "InputBox";
					Instances.InputBox_3.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.InputBox_3.Size = UDim2.new(1, 0, 1, 0);
					Instances.InputBox_3.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.InputBox_3.BackgroundTransparency = 1;
					Instances.InputBox_3.Position = UDim2.new(0.5, 0, 0.5, 0);
					Instances.InputBox_3.BorderSizePixel = 0;
					Instances.InputBox_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.InputBox_3.ImageTransparency = 1;
					Instances.InputBox_3.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
					Instances.InputBox_3.ZIndex = 2;
					Instances.InputBox_3.Parent = Instances.Tab_2 or self.Parent.Instances.Tab_2;
	
					Instances.SectionListFrame = Instance.new(__Instances.SectionListFrame.ClassName)
					Instances.SectionListFrame.Name = "SectionListFrame";
					Instances.SectionListFrame.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.SectionListFrame.ZIndex = 2;
					Instances.SectionListFrame.Size = UDim2.new(0.714999974, -8, 1, -24);
					Instances.SectionListFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.SectionListFrame.BackgroundTransparency = 0.85;
					Instances.SectionListFrame.Position = UDim2.new(0.644999981, -8, 0.5, 0);
					Instances.SectionListFrame.BorderSizePixel = 0;
					Instances.SectionListFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.SectionListFrame.ZIndex = 2;
					Instances.SectionListFrame.Parent = Instances.ContainerFrame_2 or self.Parent.Instances.ContainerFrame_2;
	
					Instances.UICorner_7 = Instance.new(__Instances.UICorner_7.ClassName)
					Instances.UICorner_7.Name = "UICorner";
					Instances.UICorner_7.Parent = Instances.SectionListFrame or self.Parent.Instances.SectionListFrame;
	
					Instances.ScrollingFrame_2 = Instance.new(__Instances.ScrollingFrame_2.ClassName)
					Instances.ScrollingFrame_2.Name = "ScrollingFrame";
					Instances.ScrollingFrame_2.Active = true;
					Instances.ScrollingFrame_2.AnchorPoint = Vector2.new(0.5, 0.5);
					Instances.ScrollingFrame_2.Size = UDim2.new(1, -16, 1, -16);
					Instances.ScrollingFrame_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
					Instances.ScrollingFrame_2.BackgroundTransparency = 1;
					Instances.ScrollingFrame_2.Position = UDim2.new(0.5, 0, 0.5, 0);
					Instances.ScrollingFrame_2.BorderSizePixel = 0;
					Instances.ScrollingFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
					Instances.ScrollingFrame_2.ScrollBarThickness = 1;
					Instances.ScrollingFrame_2.ScrollingDirection = Enum.ScrollingDirection.Y
					Instances.ScrollingFrame_2.ElasticBehavior = Enum.ElasticBehavior.Never;
					Instances.ScrollingFrame_2.CanvasSize = UDim2.new(0, 0, 0, 0);
					Instances.ScrollingFrame_2.ZIndex = 2;
					Instances.ScrollingFrame_2.Parent = Instances.SectionListFrame or self.Parent.Instances.SectionListFrame;
	
					Instances.UIListLayout_2 = Instance.new(__Instances.UIListLayout_2.ClassName)
					Instances.UIListLayout_2.Name = "UIListLayout";
					Instances.UIListLayout_2.Padding = UDim.new(0, 4);
					Instances.UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder;
					Instances.UIListLayout_2.Parent = Instances.ScrollingFrame_2 or self.Parent.Instances.ScrollingFrame_2;
	
					Instances.UIGradient_17 = Instance.new(__Instances.UIGradient_17.ClassName)
					Instances.UIGradient_17.Name = "UIGradient";
					Instances.UIGradient_17.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.8999999761581421, 1), NumberSequenceKeypoint.new(1, 0.956250011920929)});
					Instances.UIGradient_17.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(125, 86, 86)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 86, 86))});
					Instances.UIGradient_17.Rotation = 90;
					Instances.UIGradient_17.Parent = Instances.SectionListFrame or self.Parent.Instances.SectionListFrame;
	
					Instances.SectionListFrame.Visible = false
					Instances.ScrollingFrame_2.Visible = false
	
					self.Destroy = function()
						Instances.Tab_2:Destroy()
						Instances.SectionListFrame:Destroy()
	
						TableRemove(self, "Tabs")
					end
	
					self.Tweens.Visibility = {}
	
					self.Show = function(self)
						for i, v in pairs(self.Tweens.Visibility) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						for i, v in pairs(self.Tabs) do
							v.Data.Visible = false

							do
								local TweenId = {}
								self.Tweens.Visibility[TweenId] = {
									Tween = TweenService:Create(v.Instances.Tab_2, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
										BackgroundTransparency = 0.85;
									});
								}
	
								self.Tweens.Visibility[TweenId].Tween:Play()
	
								self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
									self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
									self.Tweens.Visibility[TweenId] = nil
								end)
							end
							
							v.Instances.SectionListFrame.Visible = false
							v.Instances.ScrollingFrame_2.Visible = false
						end

						data.Visible = true
	
						do
							local TweenId = {}
							self.Tweens.Visibility[TweenId] = {
								Tween = TweenService:Create(Instances.Tab_2, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
									BackgroundTransparency = 0.7;
								});
							}
	
							self.Tweens.Visibility[TweenId].Tween:Play()
	
							self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
								self.Tweens.Visibility[TweenId] = nil
							end)
						end
	
						Instances.SectionListFrame.Visible = true
						Instances.ScrollingFrame_2.Visible = true
					end
	
					if data.Home then
						self:Show()
					end
	
					self.Tweens.Experience = {}
	
					Input:Hover(Instances.InputBox_3, function(input, processed)
	
						for i, v in pairs(self.Tweens.Experience) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						do
							local TweenId = {}
							self.Tweens.Experience[TweenId] = {
								Tween = TweenService:Create(Instances.Tab_2, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
									Size = UDim2.new(1, 0, 0, 40);
									BackgroundTransparency = 0.7;
								});
							}
	
							self.Tweens.Experience[TweenId].Tween:Play()
	
							self.Tweens.Experience[TweenId].Completed = self.Tweens.Experience[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Experience[TweenId].Completed:Disconnect()
	
								self.Tweens.Experience[TweenId] = nil
							end)
						end
					end, function(input, processed)
	
						for i, v in pairs(self.Tweens.Experience) do
							v.Tween:Pause()
	
							v.Completed:Disconnect()
						end
	
						do
							local TweenId = {}
							self.Tweens.Experience[TweenId] = {
								Tween = TweenService:Create(Instances.Tab_2, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
									Size = UDim2.new(1, 0, 0, 36);
									BackgroundTransparency = Instances.ScrollingFrame_2.Visible and 0.7 or 0.85;
								});
							}
	
							self.Tweens.Experience[TweenId].Tween:Play()
	
							self.Tweens.Experience[TweenId].Completed = self.Tweens.Experience[TweenId].Tween.Completed:Connect(function()
								self.Tweens.Experience[TweenId].Completed:Disconnect()
	
								self.Tweens.Experience[TweenId] = nil
							end)
						end
					end)
	
					Input:Click(Instances.InputBox_3, function(input, processed)
	
						self:Show()
					end)
	
					Instances.UIListLayout_2:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
						Instances.ScrollingFrame_2.CanvasSize = UDim2.new(0, 0, 0, Instances.UIListLayout_2.AbsoluteContentSize.Y)
					end)
	
					self.CreateSection = function(self, data)
						self:Assert(type(data) == "table", ("Data expected table for %s CreateSection got %s."):format(self.Init.Name, type(data)))
	
						local Init = {
							Name = "Section";
							Visible = nil;
							Callback = function(self)
	
							end;
						}
	
						local self = setmetatable({
							Parent = self
						}, self)
						self.__index = self
						self.Data = data
						self.Init = clone(Init)
	
						for i, v in pairs(self.Init) do
							if data[i] == nil then
								self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
							end
	
							rawset(self.Init, i, data[i])
						end
	
						local Instances = setmetatable({}, {
							__index = function(self, key)
							end;
						})
	
						self.Instances = Instances
	
						self.Tweens = {}
	
						self.Elements = {}
						self.Changes = {}
						self.Buttons = {}
						self.Toggles = {}
						self.Sliders = {}
						self.Keybinds = {}
						self.Inputs = {}
						self.Dropdowns = {}
	
						table.insert(self.Sections, self)
	
						self.SectionsObjectId = #self.Sections

						self.TemplateData = {
							Elements = {
								Name = {
									Position = UDim2.new(0.5, -50, 0.5, 0);
								};
								BarInputBox = {
									Position = UDim2.new(0.75, -8, 0.5, 0); --UDim2.new(0.575, -8, 0.5, 0);
								};
							};
						}
	
						Instances.Section_1 = Instance.new(__Instances.Section_1.ClassName)
						Instances.Section_1.Name = data.Name or "Section";
						Instances.Section_1.Size = UDim2.new(1, 0, 0, 30);
						Instances.Section_1.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Instances.Section_1.BackgroundTransparency = 1;
						Instances.Section_1.BorderSizePixel = 0;
						Instances.Section_1.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Instances.Section_1.LayoutOrder = data.LayoutOrder or 0;
						Instances.Section_1.ZIndex = 2;
						Instances.Section_1.Parent = Instances.ScrollingFrame_2 or self.Parent.Instances.ScrollingFrame_2;
	
						Instances.ScrollingFrame_3 = Instance.new(__Instances.ScrollingFrame_3.ClassName)
						Instances.ScrollingFrame_3.Name = "ScrollingFrame";
						Instances.ScrollingFrame_3.Active = true;
						Instances.ScrollingFrame_3.AnchorPoint = Vector2.new(0.5, 0);
						Instances.ScrollingFrame_3.Size = UDim2.new(1, -16, 0, 160);
						Instances.ScrollingFrame_3.SizeConstraint = Enum.SizeConstraint.RelativeXX;
						Instances.ScrollingFrame_3.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Instances.ScrollingFrame_3.LayoutOrder = 2;
						Instances.ScrollingFrame_3.BackgroundTransparency = 1;
						Instances.ScrollingFrame_3.ScrollBarImageTransparency = 1;
						Instances.ScrollingFrame_3.Position = UDim2.new(0.5, 0, 0, 34);
						Instances.ScrollingFrame_3.BorderSizePixel = 0;
						Instances.ScrollingFrame_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Instances.ScrollingFrame_3.ScrollBarThickness = 1;
						Instances.ScrollingFrame_3.ScrollingDirection = Enum.ScrollingDirection.Y
						Instances.ScrollingFrame_3.ElasticBehavior = Enum.ElasticBehavior.Never;
						Instances.ScrollingFrame_3.CanvasSize = UDim2.new(0, 0, 0, 0);
						Instances.ScrollingFrame_3.ZIndex = 2;
						Instances.ScrollingFrame_3.Parent = Instances.Section_1 or self.Parent.Instances.Section_1;
	
						Instances.UIListLayout_3 = Instance.new(__Instances.UIListLayout_3.ClassName)
						Instances.UIListLayout_3.Name = "UIListLayout";
						Instances.UIListLayout_3.Padding = UDim.new(0, 4);
						Instances.UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder;
						Instances.UIListLayout_3.Parent = Instances.ScrollingFrame_3 or self.Parent.Instances.ScrollingFrame_3;
	
						Instances.Section_3 = Instance.new(__Instances.Section_3.ClassName)
						Instances.Section_3.Name = "Section";
						Instances.Section_3.AnchorPoint = Vector2.new(0.5, 0.5);
						Instances.Section_3.Size = UDim2.new(1, 0, 0, 30);
						Instances.Section_3.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Instances.Section_3.LayoutOrder = 1;
						Instances.Section_3.BackgroundTransparency = 0.85;
						Instances.Section_3.Position = UDim2.new(0.5, 0, 0, 15);
						Instances.Section_3.BorderSizePixel = 0;
						Instances.Section_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Instances.Section_3.ImageTransparency = 1;
						Instances.Section_3.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
						Instances.Section_3.ZIndex = 2;
						Instances.Section_3.Parent = Instances.Section_1 or self.Parent.Instances.Section_1;
	
						Instances.Icon_10 = Instance.new(__Instances.Icon_10.ClassName)
						Instances.Icon_10.Name = "Icon";
						Instances.Icon_10.Active = false
						Instances.Icon_10.AnchorPoint = Vector2.new(0.5, 0.5);
						Instances.Icon_10.Size = UDim2.new(0, 20, 0, 20);
						Instances.Icon_10.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Instances.Icon_10.BackgroundTransparency = 1;
						Instances.Icon_10.Position = UDim2.new(0.0299999993, 8, 0.5, 0);
						Instances.Icon_10.BorderSizePixel = 0;
						Instances.Icon_10.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Instances.Icon_10.Image = "rbxassetid://18738484804";
						Instances.Icon_10.ZIndex = 2;
						Instances.Icon_10.Parent = Instances.Section_3 or self.Parent.Instances.Section_3;
	
						Instances.UICorner_19 = Instance.new(__Instances.UICorner_19.ClassName)
						Instances.UICorner_19.Name = "UICorner";
						Instances.UICorner_19.CornerRadius = UDim.new(0, 4);
						Instances.UICorner_19.Parent = Instances.Section_3 or self.Parent.Instances.Section_3;
	
						Instances.TextLabel_9 = Instance.new(__Instances.TextLabel_9.ClassName)
						Instances.TextLabel_9.Name = "TextLabel";
						Instances.TextLabel_9.AnchorPoint = Vector2.new(0.5, 0.5);
						Instances.TextLabel_9.Size = UDim2.new(1, -120, 1, 0);
						Instances.TextLabel_9.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Instances.TextLabel_9.BackgroundTransparency = 1;
						Instances.TextLabel_9.Position = UDim2.new(0.5, -20, 0.5, 0);
						Instances.TextLabel_9.BorderSizePixel = 0;
						Instances.TextLabel_9.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Instances.TextLabel_9.TextColor3 = Color3.fromRGB(255, 255, 255);
						Instances.TextLabel_9.Text = data.Name or "Section 1";
						Instances.TextLabel_9.TextXAlignment = Enum.TextXAlignment.Left;
						Instances.TextLabel_9.TextWrapped = true;
						Instances.TextLabel_9.TextSize = 14;
						Instances.TextLabel_9.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
						Instances.TextLabel_9.ZIndex = 3;
						Instances.TextLabel_9.Parent = Instances.Section_3 or self.Parent.Instances.Section_3;
	
						Instances.InputBox_9 = Instance.new(__Instances.InputBox_9.ClassName)
						Instances.InputBox_9.Name = "InputBox";
						Instances.InputBox_9.AnchorPoint = Vector2.new(0.5, 0.5);
						Instances.InputBox_9.Size = UDim2.new(1, 0, 1, 0);
						Instances.InputBox_9.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Instances.InputBox_9.BackgroundTransparency = 1;
						Instances.InputBox_9.Position = UDim2.new(0.5, 0, 0.5, 0);
						Instances.InputBox_9.BorderSizePixel = 0;
						Instances.InputBox_9.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Instances.InputBox_9.ImageTransparency = 1;
						Instances.InputBox_9.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
						Instances.InputBox_9.ZIndex = 3;
						Instances.InputBox_9.Parent = Instances.Section_3 or self.Parent.Instances.Section_3;
	
						Instances.UIGradient_10 = Instance.new(__Instances.UIGradient_10.ClassName)
						Instances.UIGradient_10.Name = "UIGradient";
						Instances.UIGradient_10.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.25, 0.5), NumberSequenceKeypoint.new(0.75, 0.75), NumberSequenceKeypoint.new(1, 1)});
						Instances.UIGradient_10.Enabled = false;
						Instances.UIGradient_10.Parent = Instances.Section_3 or self.Parent.Instances.Section_3;
	
						Instances.Separator = Instance.new(__Instances.Separator.ClassName)
						Instances.Separator.Name = "Separator";
						Instances.Separator.AnchorPoint = Vector2.new(0.5, 0.5);
						Instances.Separator.Size = UDim2.new(0.95, 0, 0, 1);
						Instances.Separator.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Instances.Separator.BackgroundTransparency = 0.75;
						Instances.Separator.Position = UDim2.new(0.5, 0, 1, 0);
						Instances.Separator.BorderSizePixel = 0;
						Instances.Separator.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Instances.Separator.ZIndex = 3;
						Instances.Separator.Parent = Instances.Section_1 or self.Parent.Instances.Section_1;
	
						self.Destroy = function(self)
							Instances.Section_1:Destroy()
	
							TableRemove(self, "Sections", self.SetcionsObjectId)
						end
	
						local SectionSize = Vector2.new(0, 30)
	
						self.Tweens.Element = {}
	
						local AddElement = function(offset)
							for i, v in pairs(self.Tweens.Element) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
	
							for i, v in pairs(self.Tweens.Visibility) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
	
							SectionSize = Vector2.new(SectionSize.X, SectionSize.Y + offset)
	
							Instances.Section_1.Size = UDim2.new(1, 0, 0, SectionSize.Y);
	
							Instances.ScrollingFrame_3.Size = UDim2.new(1, -16, 0, SectionSize.Y - 0);
						end
	
						local RemoveElement = function(offset)
							for i, v in pairs(self.Tweens.Element) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
	
							for i, v in pairs(self.Tweens.Visibility) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
	
							SectionSize = Vector2.new(SectionSize.X, SectionSize.Y - offset)
	
							Instances.Section_1.Size = UDim2.new(1, 0, 0, SectionSize.Y);
	
							Instances.ScrollingFrame_3.Size = UDim2.new(1, -16, 0, SectionSize.Y - 0);
						end
	
						self.Tweens.Visibility = {}
	
						self.Show = function(self)
							for i, v in pairs(self.Tweens.Visibility) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
							
							do
								local TweenId = {}
								self.Tweens.Visibility[TweenId] = {
									Tween = TweenService:Create(Instances.Section_1, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
										Size = UDim2.new(1, 0, 0, SectionSize.Y);
									});
								}
	
								self.Tweens.Visibility[TweenId].Tween:Play()
	
								self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
									self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
									self.Tweens.Visibility[TweenId] = nil
								end)
							end

							Instances.ScrollingFrame_3.Visible = true
	
							do
								local TweenId = {}
								self.Tweens.Visibility[TweenId] = {
									Tween = TweenService:Create(Instances.ScrollingFrame_3, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
										Size = UDim2.new(1, -16, 0, SectionSize.Y - 0);
									});
								}
	
								self.Tweens.Visibility[TweenId].Tween:Play()
	
								self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
									self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
									self.Tweens.Visibility[TweenId] = nil

									do
										local TweenId = {}
										self.Tweens.Visibility[TweenId] = {
											Tween = TweenService:Create(Instances.Separator, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
												Size = UDim2.new(0.95, 0, 0, 1);
											});
										}
	
										self.Tweens.Visibility[TweenId].Tween:Play()
	
										self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
											self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
											self.Tweens.Visibility[TweenId] = nil
										end)
									end
								end)
							end
	
							Instances.Icon_10.Image = "rbxassetid://18738484804";
						end
	
						self.Hide = function(self)
							for i, v in pairs(self.Tweens.Visibility) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
	
							do
								local TweenId = {}
								self.Tweens.Visibility[TweenId] = {
									Tween = TweenService:Create(Instances.Section_1, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
										Size = UDim2.new(1, 0, 0, 30);
									});
								}
	
								self.Tweens.Visibility[TweenId].Tween:Play()
	
								self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
									self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
									self.Tweens.Visibility[TweenId] = nil
								end)
							end
	
							do
								local TweenId = {}
								self.Tweens.Visibility[TweenId] = {
									Tween = TweenService:Create(Instances.ScrollingFrame_3, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
										Size = UDim2.new(1, -16, 0, 0);
									});
								}
	
								self.Tweens.Visibility[TweenId].Tween:Play()
	
								self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
									self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
									self.Tweens.Visibility[TweenId] = nil
									
									Instances.ScrollingFrame_3.Visible = false

									do
										local TweenId = {}
										self.Tweens.Visibility[TweenId] = {
											Tween = TweenService:Create(Instances.Separator, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
												Size = UDim2.new(0, 0, 0, 1);
											});
										}
	
										self.Tweens.Visibility[TweenId].Tween:Play()
	
										self.Tweens.Visibility[TweenId].Completed = self.Tweens.Visibility[TweenId].Tween.Completed:Connect(function()
											self.Tweens.Visibility[TweenId].Completed:Disconnect()
	
											self.Tweens.Visibility[TweenId] = nil
										end)
									end
								end)
							end
	
							Instances.Icon_10.Image = "rbxassetid://18738458078";
						end
	
						if data.Visible then
							self:Show()
						else
							self:Hide()
						end
	
						self.Tweens.Experience = {}
	
						Input:Hover(Instances.InputBox_9, function(input, processed)
	
							for i, v in pairs(self.Tweens.Experience) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
	
							do
								local TweenId = {}
								self.Tweens.Experience[TweenId] = {
									Tween = TweenService:Create(Instances.Section_3, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
										Size = UDim2.new(1, 0, 0, 34);
										BackgroundTransparency = 0.7;
									});
								}
	
								self.Tweens.Experience[TweenId].Tween:Play()
	
								self.Tweens.Experience[TweenId].Completed = self.Tweens.Experience[TweenId].Tween.Completed:Connect(function()
									self.Tweens.Experience[TweenId].Completed:Disconnect()
	
									self.Tweens.Experience[TweenId] = nil
								end)
							end
						end, function(input, processed)
	
							for i, v in pairs(self.Tweens.Experience) do
								v.Tween:Pause()
	
								v.Completed:Disconnect()
							end
	
							do
								local TweenId = {}
								self.Tweens.Experience[TweenId] = {
									Tween = TweenService:Create(Instances.Section_3, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
										Size = UDim2.new(1, 0, 0, 30);
										BackgroundTransparency = 0.85;
									});
								}
	
								self.Tweens.Experience[TweenId].Tween:Play()
	
								self.Tweens.Experience[TweenId].Completed = self.Tweens.Experience[TweenId].Tween.Completed:Connect(function()
									self.Tweens.Experience[TweenId].Completed:Disconnect()
	
									self.Tweens.Experience[TweenId] = nil
								end)
							end
						end)
	
						Input:Click(Instances.InputBox_9, function(input, processed)
	
							if not data.Visible then
								data.Visible = true

								self:Show()
							else
								data.Visible = false

								self:Hide()
							end
						end)
	
						Instances.UIListLayout_3:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
							Instances.ScrollingFrame_3.CanvasSize = UDim2.new(0, 0, 0, Instances.UIListLayout_3.AbsoluteContentSize.Y)
						end)
	
						self.CreateChange = function(self, data)
							self:Assert(type(data) == "table", ("Data expected table for %s CreateChange got %s."):format(self.Init.Name, type(data)))
	
							local Init = {
								Name = "Changelog";
								Initial = false;
								Logs = {
									"[+] Feature";
								};
								Callback = function(self)
	
								end;
							}
	
							local self = setmetatable({
								Parent = self
							}, self)
							self.__index = self
							self.Data = data
							self.Init = clone(Init)
	
							for i, v in pairs(self.Init) do
								if data[i] == nil then
									self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
								end
	
								rawset(self.Init, i, data[i])
							end
	
							local Instances = setmetatable({}, {
								__index = function(self, key)
								end;
							})
	
							self.Instances = Instances
	
							self.Tweens = {}
	
							table.insert(self.Elements, self)
							table.insert(self.Changes, self)
	
							self.ElementsObjectId = #self.Elements
							self.ChangesObjectId = #self.Changes
	
							local TotalSize = 0
	
							TotalSize = TotalSize + 36
	
							AddElement(36 + 4)
	
							Instances.Change_1 = Instance.new(__Instances.Change_1.ClassName)
							Instances.Change_1.Name = data.Name or "Change 1";
							Instances.Change_1.Size = UDim2.new(1, 0, 0, 36);
							Instances.Change_1.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.Change_1.BackgroundTransparency = 0.8500000238418579;
							Instances.Change_1.BorderSizePixel = 0;
							Instances.Change_1.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Change_1.LayoutOrder = data.LayoutOrder or 0;
							Instances.Change_1.Parent = Instances.ScrollingFrame_3 or self.Parent.Instances.ScrollingFrame_3;
	
							Instances.UIGradient = Instance.new(__Instances.UIGradient.ClassName)
							Instances.UIGradient.Name = "UIGradient";
							Instances.UIGradient.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.8999999761581421, 1), NumberSequenceKeypoint.new(1, 0.956250011920929)});
							Instances.UIGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(125, 86, 86)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 86, 86))});
							Instances.UIGradient.Rotation = 90;
							Instances.UIGradient.Parent = Instances.Change_1 or self.Parent.Instances.Change_1;
	
							Instances.Changelogs = Instance.new(__Instances.Changelogs.ClassName)
							Instances.Changelogs.Name = "Changelogs";
							Instances.Changelogs.AnchorPoint = Vector2.new(0.5, 0);
							Instances.Changelogs.Size = UDim2.new(1, 0, 0, 36);
							Instances.Changelogs.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.Changelogs.BackgroundTransparency = 1;
							Instances.Changelogs.Position = UDim2.new(0.5, 0, 0, 0);
							Instances.Changelogs.BorderSizePixel = 0;
							Instances.Changelogs.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Changelogs.TextColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Changelogs.Text = data.Name or "Changelogs v2.0.0";
							Instances.Changelogs.TextWrapped = true;
							Instances.Changelogs.TextSize = 24;
							Instances.Changelogs.FontFace = Font.new("rbxasset://fonts/families/TitilliumWeb.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal);
							Instances.Changelogs.Parent = Instances.Change_1 or self.Parent.Instances.Change_1;
	
							Instances.ScrollingFrame = Instance.new(__Instances.ScrollingFrame.ClassName)
							Instances.ScrollingFrame.Name = "ScrollingFrame";
							Instances.ScrollingFrame.Active = true;
							Instances.ScrollingFrame.AnchorPoint = Vector2.new(0.5, 0);
							Instances.ScrollingFrame.Size = UDim2.new(1, 0, 0, 44);
							Instances.ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.ScrollingFrame.BackgroundTransparency = 1;
							Instances.ScrollingFrame.Position = UDim2.new(0.5, 0, 0, 36);
							Instances.ScrollingFrame.BorderSizePixel = 0;
							Instances.ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.ScrollingFrame.ScrollBarThickness = 1;
							Instances.ScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
							Instances.ScrollingFrame.ElasticBehavior = Enum.ElasticBehavior.Never;
							Instances.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0);
							Instances.ScrollingFrame.Parent = Instances.Changelogs or self.Parent.Instances.Changelogs;
	
							Instances.UIListLayout = Instance.new(__Instances.UIListLayout.ClassName)
							Instances.UIListLayout.Name = "UIListLayout";
							Instances.UIListLayout.Padding = UDim.new(0, 4);
							Instances.UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
							Instances.UIListLayout.Parent = Instances.ScrollingFrame or self.Parent.Instances.ScrollingFrame;
	
							for i, v in pairs(data.Logs) do
								TotalSize = TotalSize + 20
	
								AddElement(20 + 4)
	
								Instances.Change_1.Size = UDim2.new(1, 0, 0, TotalSize);
	
								Instances.Change_2 = Instance.new(__Instances.Change_2.ClassName)
								Instances.Change_2.Name = "Change";
								Instances.Change_2.AnchorPoint = Vector2.new(0.5, 0.5);
								Instances.Change_2.Size = UDim2.new(0.925, 0, 0, 20);
								Instances.Change_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
								Instances.Change_2.BackgroundTransparency = 1;
								Instances.Change_2.Position = UDim2.new(0.5, 0, 0, 50);
								Instances.Change_2.BorderSizePixel = 0;
								Instances.Change_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
								Instances.Change_2.TextColor3 = Color3.fromRGB(255, 255, 255);
								Instances.Change_2.Text = v or "[+] Auto Parry";
								Instances.Change_2.TextTransparency = 0.4
								Instances.Change_2.TextXAlignment = Enum.TextXAlignment.Left;
								Instances.Change_2.TextSize = 14;
								Instances.Change_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal);
								Instances.Change_2.Parent = Instances.ScrollingFrame or self.Parent.Instances.ScrollingFrame;
							end
	
							self.Destroy = function(self)
								Instances.Change_1:Destroy()
	
								RemoveElement(36 + 4)
	
								for i, v in pairs(data.Logs) do
									RemoveElement(20 + 4)
								end
	
								TableRemove(self, "Elements", self.ElementsObjectId)
								TableRemove(self, "Changes", self.ChangesObjectId)
							end
	
							for i, v in pairs(Instances.Change_1:GetDescendants()) do
								pcall(function()
									v.ZIndex = v.ZIndex + 3;
								end)
							end
	
							Instances.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
								Instances.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, Instances.UIListLayout.AbsoluteContentSize.Y)
							end)
	
							if data.Initial then
								data.Callback(self)
							end
	
							return self
						end
	
						self.CreateButton = function(self, data)
							self:Assert(type(data) == "table", ("Data expected table for %s CreateButton got %s."):format(self.Init.Name, type(data)))
	
							local Init = {
								Name = "Button";
								Initial = false;
								Callback = function(self)
	
								end;
							}
	
							local self = setmetatable({
								Parent = self
							}, self)
							self.__index = self
							self.Data = data
							self.Init = clone(Init)
	
							for i, v in pairs(self.Init) do
								if data[i] == nil then
									self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
								end
	
								rawset(self.Init, i, data[i])
							end
	
							local Instances = setmetatable({}, {
								__index = function(self, key)
								end;
							})
	
							self.Instances = Instances
	
							self.Tweens = {}
	
							table.insert(self.Elements, self)
							table.insert(self.Buttons, self)
	
							self.ElementsObjectId = #self.Elements
							self.ButtonsObjectId = #self.Buttons
	
							AddElement(36 + 4)
	
							Instances.Button = Instance.new(__Instances.Button.ClassName)
							Instances.Button.Name = data.Name or "Button";
							Instances.Button.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.Button.Size = UDim2.new(1, 0, 0, 36);
							Instances.Button.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.Button.BackgroundTransparency = 1;
							Instances.Button.Position = UDim2.new(0.5, 0, 0, 18);
							Instances.Button.BorderSizePixel = 0;
							Instances.Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Button.ImageTransparency = 1;
							Instances.Button.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
							Instances.Button.LayoutOrder = data.LayoutOrder or 0;
							Instances.Button.Parent = Instances.ScrollingFrame_3 or self.Parent.Instances.ScrollingFrame_3;
	
							Instances.Icon_5 = Instance.new(__Instances.Icon_5.ClassName)
							Instances.Icon_5.Name = "Icon";
							Instances.Icon_5.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.Icon_5.Size = UDim2.new(0, 20, 0, 20);
							Instances.Icon_5.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.Icon_5.BackgroundTransparency = 1;
							Instances.Icon_5.Position = UDim2.new(0.0299999993, 8, 0.5, 0);
							Instances.Icon_5.BorderSizePixel = 0;
							Instances.Icon_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Icon_5.Image = "rbxassetid://18737784284";
							Instances.Icon_5.Visible = false;
							Instances.Icon_5.Parent = Instances.Button or self.Parent.Instances.Button;
	
							Instances.UICorner_8 = Instance.new(__Instances.UICorner_8.ClassName)
							Instances.UICorner_8.Name = "UICorner";
							Instances.UICorner_8.CornerRadius = UDim.new(0, 4);
							Instances.UICorner_8.Parent = Instances.Button or self.Parent.Instances.Button;
	
							Instances.TextLabel_3 = Instance.new(__Instances.TextLabel_3.ClassName)
							Instances.TextLabel_3.Name = "TextLabel";
							Instances.TextLabel_3.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.TextLabel_3.Size = UDim2.new(1, -120, 1, 0);
							Instances.TextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.TextLabel_3.BackgroundTransparency = 1;
							Instances.TextLabel_3.Position = self.Parent.TemplateData.Elements.Name.Position
							Instances.TextLabel_3.BorderSizePixel = 0;
							Instances.TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.TextLabel_3.TextColor3 = Color3.fromRGB(255, 255, 255);
							Instances.TextLabel_3.Text = data.Name or "Button";
							Instances.TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left;
							Instances.TextLabel_3.TextWrapped = true;
							Instances.TextLabel_3.TextSize = 14;
							Instances.TextLabel_3.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Instances.TextLabel_3.Parent = Instances.Button or self.Parent.Instances.Button;
	
							Instances.UIGradient_5 = Instance.new(__Instances.UIGradient_5.ClassName)
							Instances.UIGradient_5.Name = "UIGradient";
							Instances.UIGradient_5.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.4000000059604645, 0.800000011920929), NumberSequenceKeypoint.new(0.75, 0.8500000238418579), NumberSequenceKeypoint.new(1, 0.5)});
							Instances.UIGradient_5.Enabled = false;
							Instances.UIGradient_5.Parent = Instances.Button or self.Parent.Instances.Button;
	
							Instances.InputBox_5 = Instance.new(__Instances.InputBox_5.ClassName)
							Instances.InputBox_5.Name = "InputBox";
							Instances.InputBox_5.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.InputBox_5.ZIndex = 2
							Instances.InputBox_5.Size = UDim2.new(0, 70, 1, 0);
							Instances.InputBox_5.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.InputBox_5.BackgroundTransparency = 1;
							Instances.InputBox_5.Position = UDim2.new(0.925000012, -8, 0.5, 0);
							Instances.InputBox_5.BorderSizePixel = 0;
							Instances.InputBox_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.InputBox_5.ImageTransparency = 1;
							Instances.InputBox_5.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
							Instances.InputBox_5.Parent = Instances.Button or self.Parent.Instances.Button;
	
							Instances.ImageButton = Instance.new(__Instances.ImageButton.ClassName)
							Instances.ImageButton.Name = "ImageButton";
							Instances.ImageButton.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.ImageButton.Size = UDim2.new(0, 60, 0, 25);
							Instances.ImageButton.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.ImageButton.LayoutOrder = 1;
							Instances.ImageButton.BackgroundTransparency = 0.8500000238418579;
							Instances.ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0);
							Instances.ImageButton.BorderSizePixel = 0;
							Instances.ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.ImageButton.ImageTransparency = 1;
							Instances.ImageButton.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
							Instances.ImageButton.Parent = Instances.InputBox_5 or self.Parent.Instances.InputBox_5;
	
							Instances.UICorner_9 = Instance.new(__Instances.UICorner_9.ClassName)
							Instances.UICorner_9.Name = "UICorner";
							Instances.UICorner_9.CornerRadius = UDim.new(0, 4);
							Instances.UICorner_9.Parent = Instances.ImageButton or self.Parent.Instances.ImageButton;
	
							Instances.UIGradient_6 = Instance.new(__Instances.UIGradient_6.ClassName)
							Instances.UIGradient_6.Name = "UIGradient";
							Instances.UIGradient_6.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.4000000059604645, 0.800000011920929), NumberSequenceKeypoint.new(0.75, 0.8500000238418579), NumberSequenceKeypoint.new(1, 0.5)});
							Instances.UIGradient_6.Enabled = false;
							Instances.UIGradient_6.Parent = Instances.ImageButton or self.Parent.Instances.ImageButton;
	
							Instances.UIStroke_2 = Instance.new(__Instances.UIStroke_2.ClassName)
							Instances.UIStroke_2.Name = "UIStroke";
							Instances.UIStroke_2.Color = Color3.fromRGB(255, 255, 255);
							Instances.UIStroke_2.Parent = Instances.ImageButton or self.Parent.Instances.ImageButton;
	
							Instances.Icon_6 = Instance.new(__Instances.Icon_6.ClassName)
							Instances.Icon_6.Name = "Icon";
							Instances.Icon_6.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.Icon_6.Size = UDim2.new(0, 18, 0, 18);
							Instances.Icon_6.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.Icon_6.BackgroundTransparency = 1;
							Instances.Icon_6.Position = UDim2.new(0.5, 0, 0.5, 0);
							Instances.Icon_6.BorderSizePixel = 0;
							Instances.Icon_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Icon_6.Image = "rbxassetid://18737784284";
							Instances.Icon_6.Parent = Instances.ImageButton or self.Parent.Instances.ImageButton;
	
							self.Destroy = function(self)
								Instances.Button:Destroy()
	
								RemoveElement(36 + 4)
	
								TableRemove(self, "Elements", self.ElementsObjectId)
								TableRemove(self, "Buttons", self.ButtonsObjectId)
							end
	
							for i, v in pairs(Instances.Button:GetDescendants()) do
								pcall(function()
									v.ZIndex = v.ZIndex + 3;
								end)
							end
	
							self.Tweens.Experience = {}
	
							Input:Hover(Instances.InputBox_5, function(input, processed)
	
								for i, v in pairs(self.Tweens.Experience) do
									v.Tween:Pause()
	
									v.Completed:Disconnect()
								end
	
								do
									local TweenId = {}
									self.Tweens.Experience[TweenId] = {
										Tween = TweenService:Create(Instances.ImageButton, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
											Size = UDim2.new(0.1, 60, 0.1, 25);
											BackgroundTransparency = 0.7;
										});
									}
	
									self.Tweens.Experience[TweenId].Tween:Play()
	
									self.Tweens.Experience[TweenId].Completed = self.Tweens.Experience[TweenId].Tween.Completed:Connect(function()
										self.Tweens.Experience[TweenId].Completed:Disconnect()
	
										self.Tweens.Experience[TweenId] = nil
									end)
								end
							end, function(input, processed)
	
								for i, v in pairs(self.Tweens.Experience) do
									v.Tween:Pause()
	
									v.Completed:Disconnect()
								end
	
								do
									local TweenId = {}
									self.Tweens.Experience[TweenId] = {
										Tween = TweenService:Create(Instances.ImageButton, TweenInfo.new(0.075, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
											Size = UDim2.new(0, 60, 0, 25);
											BackgroundTransparency = 0.85;
										});
									}
	
									self.Tweens.Experience[TweenId].Tween:Play()
	
									self.Tweens.Experience[TweenId].Completed = self.Tweens.Experience[TweenId].Tween.Completed:Connect(function()
										self.Tweens.Experience[TweenId].Completed:Disconnect()
	
										self.Tweens.Experience[TweenId] = nil
									end)
								end
							end)
	
							Input:Click(Instances.InputBox_5, function(input, processed)	
								data.Callback(self)
							end)
	
							if data.Initial then
								data.Callback(self)
							end
	
							return self
						end
	
						self.CreateInput = function(self, data)
							self:Assert(type(data) == "table", ("Data expected table for %s CreateInput got %s."):format(self.Init.Name, type(data)))
	
							local Init = {
								Name = "Input";
								Initial = false;
								ClearTextOnFocus = true;
								Placeholder = "Placeholder";
								Value = "";
								Callback = function(self)
	
								end;
							}
	
							local self = setmetatable({
								Parent = self
							}, self)
							self.__index = self
							self.Data = data
							self.Init = clone(Init)
	
							for i, v in pairs(self.Init) do
								if data[i] == nil then
									self:Assert(data[i] ~= nil, ("Data %s not found for %s Init."):format(i, self.Init.Name))
								end
	
								rawset(self.Init, i, data[i])
							end
	
							local Instances = setmetatable({}, {
								__index = function(self, key)
								end;
							})
	
							self.Instances = Instances
	
							self.Tweens = {}
	
							table.insert(self.Elements, self)
							table.insert(self.Inputs, self)
	
							self.ElementsObjectId = #self.Elements
							self.InputsObjectId = #self.Inputs
	
							AddElement(36 + 4)
	
							Instances.TextBox = Instance.new(__Instances.TextBox.ClassName)
							Instances.TextBox.Name = data.Name or "TextBox";
							Instances.TextBox.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.TextBox.Size = UDim2.new(1, 0, 0, 36);
							Instances.TextBox.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.TextBox.BackgroundTransparency = 1;
							Instances.TextBox.Position = UDim2.new(0.5, 0, 0, 18);
							Instances.TextBox.BorderSizePixel = 0;
							Instances.TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.TextBox.ImageTransparency = 1;
							Instances.TextBox.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
							Instances.TextBox.LayoutOrder = data.LayoutOrder or 0;
							Instances.TextBox.Parent = Instances.ScrollingFrame_3 or self.Parent.Instances.ScrollingFrame_3;
	
							Instances.Icon = Instance.new(__Instances.Icon.ClassName)
							Instances.Icon.Name = "Icon";
							Instances.Icon.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.Icon.Size = UDim2.new(0, 20, 0, 20);
							Instances.Icon.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.Icon.BackgroundTransparency = 1;
							Instances.Icon.Position = UDim2.new(0.03, 8, 0.5, 0);
							Instances.Icon.BorderSizePixel = 0;
							Instances.Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Icon.Image = "rbxassetid://18738617283";
							Instances.Icon.Visible = false;
							Instances.Icon.Parent = Instances.TextBox or self.Parent.Instances.TextBox;
	
							Instances.UICorner = Instance.new(__Instances.UICorner.ClassName)
							Instances.UICorner.Name = "UICorner";
							Instances.UICorner.CornerRadius = UDim.new(0, 4);
							Instances.UICorner.Parent = Instances.TextBox or self.Parent.Instances.TextBox;
	
							Instances.TextLabel = Instance.new(__Instances.TextLabel.ClassName)
							Instances.TextLabel.Name = "TextLabel";
							Instances.TextLabel.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.TextLabel.Size = UDim2.new(1, -120, 1, 0);
							Instances.TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.TextLabel.BackgroundTransparency = 1;
							Instances.TextLabel.Position = self.Parent.TemplateData.Elements.Name.Position
							Instances.TextLabel.BorderSizePixel = 0;
							Instances.TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255);
							Instances.TextLabel.Text = data.Name or "TextBox";
							Instances.TextLabel.TextXAlignment = Enum.TextXAlignment.Left;
							Instances.TextLabel.TextWrapped = true;
							Instances.TextLabel.TextSize = 14;
							Instances.TextLabel.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Instances.TextLabel.Parent = Instances.TextBox or self.Parent.Instances.TextBox;
	
							Instances.UIGradient = Instance.new(__Instances.UIGradient.ClassName)
							Instances.UIGradient.Name = "UIGradient";
							Instances.UIGradient.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.4000000059604645, 0.800000011920929), NumberSequenceKeypoint.new(0.75, 0.8500000238418579), NumberSequenceKeypoint.new(1, 0.5)});
							Instances.UIGradient.Enabled = false;
							Instances.UIGradient.Parent = Instances.TextBox or self.Parent.Instances.TextBox;
	
							Instances.InputBox = Instance.new(__Instances.InputBox.ClassName)
							Instances.InputBox.Name = "InputBox";
							Instances.InputBox.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.InputBox.Size = UDim2.new(0.5, 0, 1, 0);
							Instances.InputBox.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.InputBox.BackgroundTransparency = 1;
							Instances.InputBox.Position = self.Parent.TemplateData.Elements.BarInputBox.Position;
							Instances.InputBox.BorderSizePixel = 0;
							Instances.InputBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.InputBox.ImageTransparency = 1;
							Instances.InputBox.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
							Instances.InputBox.Parent = Instances.TextBox or self.Parent.Instances.TextBox;
	
							Instances.OuterBar = Instance.new(__Instances.OuterBar.ClassName)
							Instances.OuterBar.Name = "OuterBar";
							Instances.OuterBar.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.OuterBar.Size = UDim2.new(1, 0, 0.800000012, 0);
							Instances.OuterBar.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.OuterBar.BackgroundTransparency = 0.949999988079071;
							Instances.OuterBar.Position = UDim2.new(0.5, 0, 0.5, 0);
							Instances.OuterBar.BorderSizePixel = 0;
							Instances.OuterBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.OuterBar.Parent = Instances.InputBox or self.Parent.Instances.InputBox;
	
							Instances.UICorner_2 = Instance.new(__Instances.UICorner_2.ClassName)
							Instances.UICorner_2.Name = "UICorner";
							Instances.UICorner_2.CornerRadius = UDim.new(0, 4);
							Instances.UICorner_2.Parent = Instances.OuterBar or self.Parent.Instances.OuterBar;
	
							Instances.InputBox_2 = Instance.new(__Instances.InputBox_2.ClassName)
							Instances.InputBox_2.Name = "InputBox";
							Instances.InputBox_2.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.InputBox_2.Size = UDim2.new(0, 30, 1, 0);
							Instances.InputBox_2.SizeConstraint = Enum.SizeConstraint.RelativeYY;
							Instances.InputBox_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.InputBox_2.BackgroundTransparency = 1;
							Instances.InputBox_2.Position = UDim2.new(0.925000012, -8, 0.5, 0);
							Instances.InputBox_2.BorderSizePixel = 0;
							Instances.InputBox_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.InputBox_2.ImageTransparency = 1;
							Instances.InputBox_2.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png";
							Instances.InputBox_2.Parent = Instances.OuterBar or self.Parent.Instances.OuterBar;
	
							Instances.OuterBar_2 = Instance.new(__Instances.OuterBar_2.ClassName)
							Instances.OuterBar_2.Name = "OuterBar";
							Instances.OuterBar_2.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.OuterBar_2.Size = UDim2.new(0, 30, 0, 25);
							Instances.OuterBar_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.OuterBar_2.BackgroundTransparency = 1;
							Instances.OuterBar_2.Position = UDim2.new(0.5, 0, 0.5, 0);
							Instances.OuterBar_2.BorderSizePixel = 0;
							Instances.OuterBar_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.OuterBar_2.Parent = Instances.InputBox_2 or self.Parent.Instances.InputBox_2;
	
							Instances.UIStroke = Instance.new(__Instances.UIStroke.ClassName)
							Instances.UIStroke.Name = "UIStroke";
							Instances.UIStroke.Color = Color3.fromRGB(255, 255, 255);
							Instances.UIStroke.Enabled = false;
							Instances.UIStroke.Parent = Instances.OuterBar_2 or self.Parent.Instances.OuterBar_2;
	
							Instances.UICorner_3 = Instance.new(__Instances.UICorner_3.ClassName)
							Instances.UICorner_3.Name = "UICorner";
							Instances.UICorner_3.CornerRadius = UDim.new(0, 4);
							Instances.UICorner_3.Parent = Instances.OuterBar_2 or self.Parent.Instances.OuterBar_2;
	
							Instances.Icon_2 = Instance.new(__Instances.Icon_2.ClassName)
							Instances.Icon_2.Name = "Icon";
							Instances.Icon_2.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.Icon_2.Size = UDim2.new(0, 18, 0, 18);
							Instances.Icon_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.Icon_2.BackgroundTransparency = 1;
							Instances.Icon_2.Position = UDim2.new(0.5, 0, 0.5, 0);
							Instances.Icon_2.BorderSizePixel = 0;
							Instances.Icon_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.Icon_2.Image = "rbxassetid://123668260767673";
							Instances.Icon_2.Parent = Instances.OuterBar_2 or self.Parent.Instances.OuterBar_2;
	
							Instances.TextBox_2 = Instance.new(__Instances.TextBox_2.ClassName)
							Instances.TextBox_2.Name = "TextBox";
							Instances.TextBox_2.AnchorPoint = Vector2.new(0.5, 0.5);
							Instances.TextBox_2.Size = UDim2.new(0.925000012, 0, 1, 0);
							Instances.TextBox_2.BorderColor3 = Color3.fromRGB(0, 0, 0);
							Instances.TextBox_2.BackgroundTransparency = 1;
							Instances.TextBox_2.Position = UDim2.new(0.5, 0, 0.5, 0);
							Instances.TextBox_2.BorderSizePixel = 0;
							Instances.TextBox_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
							Instances.TextBox_2.CursorPosition = -1;
							Instances.TextBox_2.TextSize = 14;
							Instances.TextBox_2.TextColor3 = Color3.fromRGB(255, 255, 255);
							Instances.TextBox_2.Text = data.Value or "";
							Instances.TextBox_2.TextTruncate = Enum.TextTruncate.AtEnd;
							Instances.TextBox_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Instances.TextBox_2.TextXAlignment = Enum.TextXAlignment.Left;
							Instances.TextBox_2.PlaceholderText = data.Placeholder;
							Instances.TextBox_2.ClearTextOnFocus = data.ClearTextOnFocus;
							Instances.TextBox_2.Parent = Instances.OuterBar or self.Parent.Instances.OuterBar;
	
							self.Destroy = function(self)
								Instances.TextBox:Destroy()
	
								RemoveElement(36 + 4)
	
								TableRemove(self, "Elements", self.ElementsObjectId)
								TableRemove(self, "Inputs", self.InputsObjectId)
							end
	
							for i, v in pairs(Instances.TextBox:GetDescendants()) do
								pcall(function()
									v.ZIndex = v.ZIndex + 3;
								end)
							end
	
							Instances.TextBox_2:GetPropertyChangedSignal("Text"):Connect(function()
								data.Value = Instances.TextBox_2.Text
	
								data.Callback(self, data.Value, false)
							end)
	
							Instances.TextBox_2.FocusLost:Connect(function(enter)
								if enter then
									data.Callback(self, data.Value, enter)
								end
							end)
	
							if data.Initial then
								data.Callback(self, data.Value, false)
							end
	
							return self
						end
	
						self.Destroy = function(self)
							Instances.Section_1:Destroy()
	
							TableRemove(self, "Sections", self.SectionsObjectId)
						end
	
						data.Callback(self)
	
						return self
					end
	
					self.Destroy = function(self)
						Instances.Tab_2:Destroy()
	
						TableRemove(self, "Tabs", self.TabsObjectId)
					end
	
					data.Callback(self)
	
					return self
				end
	
				self.Destroy = function(self)
					Instances.MainContainerFrame:Destroy()
	
					TableRemove(self, "Windows", self.WindowsObjectId)
				end
	
				data.Callback(self)
	
				return self
			end
		end
	
		return Library
	end
end)()
